{
  "openapi": "3.0.0",
  "info": {
    "title": "User Service API",
    "description": "This API manages user authentication, authorization, and admin management.",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://user.reserva.emilharvey.ca"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "Get all users",
        "description": "Returns a list of all users.",
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get a user by ID",
        "description": "Returns a single user by ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to retrieve.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update a user by ID",
        "description": "Updates an existing user account.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to update.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a user by ID",
        "description": "Deletes an existing user account.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to delete.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/admins": {
      "get": {
        "summary": "Get all admin users",
        "description": "Returns a list of all admin users.",
        "responses": {
          "200": {
            "description": "A list of admin users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new admin user",
        "description": "Creates a new admin user account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new admin user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/standard": {
      "get": {
        "summary": "Get all standard users",
        "description": "Returns a list of all standard users.",
        "responses": {
          "200": {
            "description": "A list of standard users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new standard user",
        "description": "Creates a new standard user account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new standard user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/{userId}/groups": {
      "get": {
        "summary": "Get all groups for a user",
        "description": "Returns a list of all groups for a user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to retrieve groups for.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of groups",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "groups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GroupMembership"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NewUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateUser"
          },
          {
            "type": "object",
            "required": [
              "username",
              "email",
              "password",
              "role"
            ],
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "standard",
                  "admin"
                ],
                "default": "user",
                "description": "The user's role."
              }
            }
          }
        ]
      },
      "User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewUser"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/UserId"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2019-01-01T00:00:00Z",
                "description": "The date and time the user was created."
              },
              "lastUpdatedAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2019-03-01T00:00:00Z",
                "description": "The date and time the user was last updated."
              }
            },
            "required": [
              "id",
              "createdAt",
              "lastUpdatedAt"
            ],
            "description": "A user. This could be a standard user, an admin, or something else (tbd). The difference between this and NewUser is that this has an ID, which is assigned by the server. It also has timestamps for when the user was created and last updated.\n"
          }
        ]
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's username."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The user's email address."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The user's password."
          }
        }
      },
      "UserId": {
        "example": "user-7f876542-5b07-4ba4-a380-c946964c5a84",
        "description": "Id of a user. This is a UUID with the prefix \"user-\".\n",
        "type": "string",
        "format": "uuid",
        "pattern": "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      },
      "GroupMembership": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "group": {
                "description": "The ID of the group.",
                "example": "group-8fec2234-d8cf-43a7-a791-94b1fde42468",
                "type": "string",
                "format": "uuid",
                "pattern": "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
              },
              "user": {
                "$ref": "#/components/schemas/UserId",
                "description": "The ID of the user."
              }
            },
            "required": [
              "group",
              "user"
            ],
            "description": "This is a group membership. It is the intermediate object between a user and a group. It is used to determine which users are members of which groups.\n"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GroupMembership/allOf/0"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/components/schemas/GroupMembership/allOf/1/properties/id"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    }
  }
}
