{
  "components": {
    "schemas": {
      "datetime15min": {
        "type": "string",
        "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}t([01][0-9]|2[0-3]):(00|15|30|45):00$",
        "description": "date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00",
        "example": "2023-04-02t15:00:00"
      },
      "error": {
        "$ref": "#/paths/~1unavailabilities~1%7Bid%7D/put/responses/400/content/application~1json/schema"
      },
      "feature": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "the name of the feature."
          },
          "value": {
            "description": "the value of the feature. Should be a string, number, or boolean."
          }
        },
        "required": [
          "name",
          "value"
        ],
        "description": "the data required to create a new feature.\n",
        "example": {
          "name": "number of beds",
          "value": 2
        }
      },
      "group": {
        "allOf": [
          {
            "$ref": "#/components/schemas/newGroup"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/groupId"
              },
              "createDate": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2019-01-01t00:00:00z",
                "description": "the date and time the group was created."
              },
              "lastUpdateDate": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2019-03-01t00:00:00z",
                "description": "the date and time the group was last updated."
              },
              "owner": {
                "$ref": "#/components/schemas/userId",
                "description": "the id of the user who owns the group. this will initially be the user who created the group, but can be changed later.\n"
              }
            }
          }
        ],
        "required": [
          "owner",
          "memberships",
          "id",
          "createDate",
          "lastUpdateDate"
        ],
        "description": "a group. this could be a project group, a team, or something else. the difference between this and newGroup is that this has an id, which is assigned by the server. it also has timestamps for when the group was created and last updated.\n"
      },
      "groupId": {
        "example": "group-8fec2234-d8cf-43a7-a791-94b1fde42468",
        "description": "the id of a group. this is a uuid with the prefix \"group-\".\n",
        "type": "string",
        "format": "uuid",
        "pattern": "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      },
      "groupMembership": {
        "allOf": [
          {
            "$ref": "#/components/schemas/newGroupMembership"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/groupMembershipId"
              }
            }
          }
        ]
      },
      "groupMembershipId": {
        "example": "groupMembership-c49c283a-44d3-4cb5-b836-2ff8436f1e2f",
        "description": "the id of a group membership.",
        "type": "string",
        "format": "uuid",
        "pattern": "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      },
      "id": {
        "type": "string",
        "format": "uuid",
        "pattern": "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "description": "a uuid. this is a string that is a uuid. \n"
      },
      "item": {
        "allOf": [
          {
            "$ref": "#/components/schemas/newItem"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/itemId"
              },
              "createDate": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2019-01-01t00:00:00z",
                "description": "the date and time the item was created."
              },
              "lastUpdateDate": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2019-03-01t00:00:00z",
                "description": "the date and time the item was last updated."
              },
              "createdBy": {
                "$ref": "#/components/schemas/userId",
                "description": "the id of the user who created the item."
              }
            },
            "required": [
              "id",
              "createDate",
              "lastUpdateDate",
              "createdBy"
            ]
          }
        ],
        "description": "the data returned when an item is retrieved. this is the base schema for all item retrievals. the difference between this and the newItem schema is that this schema includes the id, createDate, and lastUpdateDate fields.\n"
      },
      "itemId": {
        "example": "item-cc354ffb-fa63-4a67-a67f-a24048c26c3f",
        "description": "the id of the item. this is a uuid with a prefix of \"item-\".\n",
        "type": "string",
        "format": "uuid",
        "pattern": "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      },
      "newGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/updateGroup"
          }
        ],
        "required": [
          "name"
        ],
        "description": "a group. this could be a project group, a team, or something else. this is sent by the client when creating a new group.\n"
      },
      "newGroupMembership": {
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/groupId",
            "description": "the id of the group."
          },
          "user": {
            "$ref": "#/components/schemas/userId",
            "description": "the id of the user."
          }
        },
        "required": [
          "group",
          "user"
        ],
        "description": "this is a group membership. it is the intermediate object between a user and a group. it is used to determine which users are members of which groups.\n"
      },
      "newItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/updateItem"
          }
        ],
        "required": [
          "name",
          "location",
          "description",
          "type",
          "features"
        ],
        "description": "the data required to create a new item. this is the base schema for all item creations. the difference between this and the updateItem schema is that this schema requires all fields to be present.\n"
      },
      "newRecurringUnavailability": {
        "allOf": [
          {
            "$ref": "#/components/schemas/newUnavailability"
          },
          {
            "type": "object",
            "properties": {
              "recurrence": {
                "$ref": "#/components/schemas/datetime15min",
                "description": "the recurrence of the unavailability timed from the start time."
              }
            },
            "required": [
              "recurrence"
            ]
          }
        ],
        "description": "a recurring unavailability. this could be a maintenance window, a booking, or something else. the client will send this when they want to create a new recurring unavailability.\n"
      },
      "newUnavailability": {
        "allOf": [
          {
            "$ref": "#/components/schemas/updateUnavailability"
          }
        ],
        "required": [
          "room",
          "startDate",
          "endDate",
          "type",
          "item"
        ],
        "description": "a new unavailability. this is sent when a client wants to create a new unavailability."
      },
      "recurringUnavailability": {
        "allOf": [
          {
            "$ref": "#/components/schemas/newRecurringUnavailability"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/unavailabilityId"
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "description": "a recurring unavailability. this could be a maintenance window, a booking, or something else. the server will send this to clients\n"
      },
      "success": {
        "$ref": "#/paths/~1unavailabilities~1%7Bid%7D/delete/responses/200/content/application~1json/schema"
      },
      "unavailability": {
        "allOf": [
          {
            "$ref": "#/components/schemas/newUnavailability"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/unavailabilityId"
              },
              "createDate": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2019-01-01t00:00:00z",
                "description": "the date and time the unavailability was created."
              },
              "lastUpdatedDate": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2019-03-01t00:00:00z",
                "description": "the date and time the unavailability was last updated."
              }
            },
            "required": [
              "id",
              "createDate",
              "lastUpdatedDate"
            ],
            "description": "an unavailability. this could be a maintenance window, a booking, or something else. the difference between this and newUnavailability is that this has an id, which is assigned by the server. it also has timestamps for when the unavailability was created and last updated.\n"
          }
        ]
      },
      "unavailabilityId": {
        "example": "unavailability-cc354ffb-fa63-4a67-a67f-a24048c26c3f",
        "description": "the id of an unavailability. this is a uuid with the prefix \"unavailability-\".\n",
        "type": "string",
        "format": "uuid",
        "pattern": "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      },
      "updateGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "project group",
            "description": "the name of the group."
          }
        },
        "description": "a group. this could be a project group, a team, or something else. this is sent by the client when updating an existing group.\n"
      },
      "updateItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "large room",
            "description": "the name of the item. for now, these will be names of rooms"
          },
          "location": {
            "type": "string",
            "example": "1st floor",
            "description": "the location of the item."
          },
          "description": {
            "type": "string",
            "example": "large room with low ceilings",
            "description": "a description of the item."
          },
          "type": {
            "type": "string",
            "example": "room",
            "enum": [
              "room"
            ],
            "description": "the type of the item. for now, this will only be room."
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/feature"
            },
            "description": "the features of the item. for now, these will be the features of the room.\n"
          }
        },
        "description": "the data required to update an item. this is the base schema for all item updates.\n"
      },
      "updateUnavailability": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/itemId",
            "description": "the id of the item to be booked. for now, only rooms can be booked."
          },
          "startDate": {
            "$ref": "#/components/schemas/datetime15min",
            "description": "the start time of the unavailability."
          },
          "endDate": {
            "$ref": "#/components/schemas/datetime15min",
            "description": "the end time of the unavailability."
          },
          "owner": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/userId"
              },
              {
                "$ref": "#/components/schemas/groupId"
              }
            ],
            "description": "The id of the user or group that owns the unavailability.\n"
          },
          "type": {
            "type": "string",
            "enum": [
              "maintenance",
              "booking",
              "offHours",
              "other"
            ]
          }
        },
        "description": "an update to an unavailability. this could be a maintenance window, a booking, or something else. this is the base type for all unavailability updates. as a result, it does not have an id, because it is not a complete unavailability. it also has no required fields, because only need to send a fragment of this data to update an unavailability.\n"
      },
      "user": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "description": "the user's first name."
          },
          "lastname": {
            "type": "string",
            "description": "the user's last name."
          },
          "role": {
            "type": "string",
            "enum": [
              "standard",
              "staff"
            ],
            "default": "standard",
            "description": "the user's role."
          }
        },
        "example": {
          "username": "debugg",
          "firstname": "deb",
          "lastname": "ugg",
          "role": "standard"
        }
      },
      "userId": {
        "type": "string",
        "example": "auth0|5c6b9f2d1f6ba37e16cbf2a8",
        "description": "id of a user. This is just a string, since the user id is provided by the authentication provider. (in this case, auth0)\n"
      }
    },
    "securitySchemes": {
      "admin": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://dev-mnj1i4nq.us.auth0.com/authorize",
            "tokenUrl": "https://dev-mnj1i4nq.us.auth0.com/oauth/token",
            "scopes": {
              "read:items": "Read full information about any room",
              "write:items": "Create and edit any room"
            }
          }
        }
      },
      "standard": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://dev-mnj1i4nq.us.auth0.com/authorize",
            "tokenUrl": "https://dev-mnj1i4nq.us.auth0.com/oauth/token",
            "scopes": {
              "read:groups:associated": "Read information about Groups you are a member of",
              "write:groupMemberships:me": "Delete your current memberships",
              "write:groups:me": "Create and edit groups under your account",
              "write:unavailabilities:me": "Create and edit new room bookings under your account"
            }
          }
        }
      },
      "staff": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://dev-mnj1i4nq.us.auth0.com/authorize",
            "tokenUrl": "https://dev-mnj1i4nq.us.auth0.com/oauth/token",
            "scopes": {
              "read:items:me": "Read full information about rooms under your account",
              "read:unavailabilities:me": "Read all information about your room bookings",
              "write:items:me": "Create and edit rooms under your account",
              "write:unavailabilities:me": "Create and edit new room bookings under your account"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "Main API",
    "version": "0.0.1"
  },
  "openapi": "3.0.2",
  "paths": {
    "/groupMemberships": {
      "post": {
        "description": "creates a new groupMembership object. Only the group owner can create a membership. (After a user becomes a member, they can delete their own membership.)\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newGroupMembership"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "groupMembership": {
                      "$ref": "#/components/schemas/groupMembership"
                    }
                  }
                }
              }
            },
            "description": "ok"
          }
        },
        "security": [
          {
            "standard": [
              "write:groups:me"
            ]
          }
        ],
        "summary": "creates a new groupMembership object",
        "tags": [
          "group"
        ]
      }
    },
    "/groups": {
      "post": {
        "description": "creates a new group object",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newGroup"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/group"
                    }
                  }
                }
              }
            },
            "description": "ok"
          }
        },
        "security": [
          {
            "standard": [
              "write:groups:me"
            ]
          }
        ],
        "summary": "creates a new group object",
        "tags": [
          "group"
        ]
      }
    },
    "/groups/{id}": {
      "delete": {
        "description": "deletes a group object",
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/group"
                    }
                  }
                }
              }
            },
            "description": "deleted"
          }
        },
        "security": [
          {
            "standard": [
              "write:groups:me"
            ]
          }
        ],
        "summary": "deletes a group object.  Also deletes all groupMembership objects associated with the group.\n",
        "tags": [
          "group"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/groupId"
          }
        }
      ],
      "put": {
        "description": "updates a group object",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "group": {
                      "$ref": "#/components/schemas/group"
                    }
                  }
                }
              }
            },
            "description": "ok"
          }
        },
        "security": [
          {
            "standard": [
              "write:groups:me"
            ]
          }
        ],
        "summary": "updates a group object",
        "tags": [
          "group"
        ]
      }
    },
    "/groups/{id}/memberships/{membershipId}": {
      "delete": {
        "description": "deletes a groupMembership object.  The group owner can delete any membership. A user can delete their own membership.\n",
        "responses": {
          "204": {
            "description": "deleted"
          },
          "404": {
            "description": "not found"
          }
        },
        "security": [
          {
            "standard": [
              "write:groups:me",
              "write:groupMemberships:me"
            ]
          }
        ],
        "summary": "deletes a groupMembership object",
        "tags": [
          "group"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/groupId"
          }
        },
        {
          "in": "path",
          "name": "membershipId",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/groupMembershipId"
          }
        }
      ]
    },
    "/groups/{id}/unavailabilities": {
      "get": {
        "description": "gets a list of unavailability objects for a group",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "unavailabilities": {
                      "items": {
                        "$ref": "#/components/schemas/unavailability"
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "ok"
          }
        },
        "security": [
          {
            "standard": [
              "read:groups:associated"
            ]
          }
        ],
        "summary": "gets a list of unavailability objects",
        "tags": [
          "group"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/groupId"
          }
        }
      ]
    },
    "/groups/{id}/users": {
      "get": {
        "description": "gets a list of user objects for a group",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "users": {
                      "items": {
                        "$ref": "#/components/schemas/user"
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "ok"
          }
        },
        "security": [
          {
            "standard": [
              "read:groups:associated"
            ]
          }
        ],
        "summary": "gets a list of user objects",
        "tags": [
          "group"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/groupId"
          }
        }
      ]
    },
    "/items": {
      "get": {
        "parameters": [
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Search for a room by name",
            "in": "query",
            "name": "nameSearch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search for a room by location",
            "in": "query",
            "name": "locationSearch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search for a room by description",
            "in": "query",
            "name": "descriptionSearch",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rooms": {
                      "items": {
                        "$ref": "#/components/schemas/item"
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "ok"
          }
        },
        "summary": "gets a list of items. for now, the only kind of item is a room.",
        "tags": [
          "item"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newItem"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "room": {
                      "$ref": "#/components/schemas/item"
                    }
                  }
                }
              }
            },
            "description": "created"
          },
          "400": {
            "description": "bad request"
          }
        },
        "security": [
          {
            "staff": [
              "write:items:me"
            ]
          },
          {
            "admin": [
              "write:items"
            ]
          }
        ],
        "summary": "posts an item. for now, the only kind of item is a room.",
        "tags": [
          "item"
        ]
      }
    },
    "/items/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "user id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "404": {
            "description": "item not found\n"
          }
        },
        "security": [
          {
            "staff": [
              "write:items:me"
            ]
          },
          {
            "admin": [
              "write:items"
            ]
          }
        ],
        "summary": "delete a room object",
        "tags": [
          "item"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/itemId"
          }
        }
      ],
      "put": {
        "parameters": [
          {
            "description": "user id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/item"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "room": {
                      "$ref": "#/components/schemas/item"
                    }
                  }
                }
              }
            },
            "description": "ok"
          },
          "404": {
            "description": "item not found\n"
          }
        },
        "security": [
          {
            "staff": [
              "write:items:me"
            ]
          },
          {
            "admin": [
              "write:items"
            ]
          }
        ],
        "summary": "updates an item. for now, the only kind of item is a room.",
        "tags": [
          "item"
        ]
      }
    },
    "/items/{id}/unavailabilities": {
      "get": {
        "parameters": [
          {
            "description": "the start date of the unavailabilities to get",
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "the end date of the unavailabilities to get",
            "in": "query",
            "name": "end",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "the page of unavailabilities to get",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "the number of unavailabilities to get per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "unavailabilities": {
                      "items": {
                        "$ref": "#/components/schemas/unavailability"
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "ok"
          },
          "404": {
            "description": "item not found\n"
          }
        },
        "summary": "gets a list of unavailabilities for a given item.",
        "tags": [
          "item"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/itemId"
          }
        }
      ]
    },
    "/unavailabilities": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/newUnavailability"
                  },
                  {
                    "$ref": "#/components/schemas/newRecurringUnavailability"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "unavailability": {
                      "$ref": "#/components/schemas/unavailability",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/paths/~1unavailabilities~1%7Bid%7D/put/responses/400/content/application~1json/schema"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "bad request"
          }
        },
        "security": [
          {
            "staff": [
              "write:unavailabilities:me"
            ]
          },
          {
            "standard": [
              "write:unavailabilities:me"
            ]
          }
        ],
        "summary": "Create a new unavailability",
        "tags": [
          "unavailability"
        ]
      }
    },
    "/unavailabilities/{id}": {
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "a generic success response. it has a message property, which is a string.\n"
                }
              }
            },
            "description": "deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1unavailabilities~1%7Bid%7D/put/responses/400/content/application~1json/schema"
                }
              }
            },
            "description": "bad request"
          }
        },
        "security": [
          {
            "staff": [
              "write:unavailabilities:me"
            ]
          },
          {
            "standard": [
              "write:unavailabilities:me"
            ]
          }
        ],
        "summary": "Delete an unavailability",
        "tags": [
          "unavailability"
        ]
      },
      "parameters": [
        {
          "description": "the unavailability id",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/unavailabilityId"
          }
        }
      ],
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "booking": {
                      "$ref": "#/components/schemas/updateUnavailability",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ok"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "description": "a generic error response. it has a message property, which is a string.\n"
                }
              }
            },
            "description": "bad request"
          }
        },
        "security": [
          {
            "staff": [
              "write:unavailabilities:me"
            ]
          },
          {
            "standard": [
              "write:unavailabilities:me"
            ]
          }
        ],
        "summary": "update an unavailability",
        "tags": [
          "unavailability"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "returns a list of all users.",
        "parameters": [
          {
            "description": "a search string to filter users by.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the page of users to retrieve.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int64",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "the number of users to retrieve per page.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int64",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "users": {
                      "items": {
                        "$ref": "#/components/schemas/user"
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "a list of users"
          }
        },
        "security": [
          {
            "admin": []
          },
          {
            "staff": []
          },
          {
            "standard": []
          }
        ],
        "summary": "get all users",
        "tags": [
          "user"
        ]
      }
    },
    "/users/me": {
      "get": {
        "description": "returns the current user.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            },
            "description": "the current user"
          }
        },
        "security": [
          {
            "standard": []
          },
          {
            "admin": []
          },
          {
            "staff": []
          }
        ],
        "summary": "get the current user",
        "tags": [
          "user"
        ]
      }
    },
    "/users/me/groups": {
      "get": {
        "description": "returns a list of all groups for the current user.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "groups": {
                      "items": {
                        "$ref": "#/components/schemas/groupMembership"
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "a list of groups"
          }
        },
        "security": [
          {
            "standard": []
          },
          {
            "admin": []
          },
          {
            "staff": []
          }
        ],
        "summary": "get all groups for the current user",
        "tags": [
          "user"
        ]
      }
    },
    "/users/me/unavailabilities": {
      "get": {
        "description": "returns a list of all unavailabilities for the current user.",
        "parameters": [
          {
            "description": "the start of the time range to retrieve unavailabilities for.",
            "in": "query",
            "name": "start",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "the end of the time range to retrieve unavailabilities for.",
            "in": "query",
            "name": "end",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "unavailabilities": {
                      "items": {
                        "$ref": "#/components/schemas/unavailability"
                      },
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "a list of unavailabilities"
          }
        },
        "security": [
          {
            "standard": []
          },
          {
            "admin": []
          },
          {
            "staff": []
          }
        ],
        "summary": "get all unavailabilities for the current user",
        "tags": [
          "user"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://reserva.emilharvey.ca"
    },
    {
      "url": "http://localhost:8080"
    }
  ]
}
