openapi: '3.0.3'
info:
  title: api title
  version: 0.0.1
servers:
  - url: https://reserva.emilharvey.ca
  - url: http://localhost:8080
paths:
  /items/{id}/unavailabilities:
    parameters:
      - name: id
        in: path
        schema:
          $ref: "#/components/schemas/itemId"
        required: true
    get:
      summary: gets a list of unavailabilities for a given item.
      parameters:
        - name: start
          in: query
          description: the start date of the unavailabilities to get
          required: true
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          description: the end date of the unavailabilities to get
          required: true
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          description: the page of unavailabilities to get
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: the number of unavailabilities to get per page
          required: false
          schema:
            type: integer
            format: int64
            maximum: 100
            default: 10
            minimum: 1

      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  "unavailabilities":
                    type: array
                    items:
                      $ref: "#/components/schemas/unavailability"
        '404':
          description: >
            item not found

  /items/{id}:
    parameters:
      - name: id
        in: path
        schema:
          $ref: "#/components/schemas/itemId"
        required: true
    put:
      summary: updates an item. for now, the only kind of item is a room.
      security:
        - staff: [write:items:me]
        - admin: [write:items]      
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/item"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  "room": # update this when we have more than one type of item
                    $ref: "#/components/schemas/item"
        '404':
          description: >
            item not found
    delete:
      summary: delete a room object
      security:
        - staff: [write:items:me]
        - admin: [write:items]
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: deleted
        '404':
          description: >
            item not found
  

  /items:
    post: 
      summary: posts an item. for now, the only kind of item is a room.
      security:
        - staff: [write:items:me]
        - admin: [write:items]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newItem"

      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                properties:
                  "room":
                    $ref: "#/components/schemas/item"
        '400':
          description: bad request

    get:
      summary: gets a list of items. for now, the only kind of item is a room.
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 100
            default: 10
        - name: nameSearch
          in: query
          description: Search for a room by name
          required: false
          schema:
            type: string
        - name: locationSearch
          in: query
          description: Search for a room by location
          required: false
          schema:
            type: string
        - name: descriptionSearch
          in: query
          description: Search for a room by description
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                    "rooms":
                      type: array
                      items:
                        $ref: "#/components/schemas/item"
            
components:
  schemas:
    $ref: "../schemas/item/_index.yaml"
  securitySchemes:
    $ref: '../security/_all.yaml'