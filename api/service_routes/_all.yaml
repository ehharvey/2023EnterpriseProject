---
# DO NOT MODIFY THIS FILE BY HAND
# IT IS AUTO GENERATED BY create_all.py
components:
  schemas:
    $ref: ../schemas/_all.yaml
info:
  title: Main API
  version: 0.0.1
openapi: 3.0.2
paths:
  /authentication/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                usernamePasswordPair:
                  $ref: '#/components/schemas/UsernamePasswordPair'
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  authorization:
                    $ref: '#/components/schemas/Authorization'
          description: Authentication Passed
        '401':
          description: Authentication Failed
      tags:
      - authentication
  /authentication/logout:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                authorization:
                  $ref: '#/components/schemas/Authorization'
      responses:
        '200':
          description: Logout Successful
        '401':
          description: Authentication Failed
      tags:
      - authentication
  /authentication/validate:
    put:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                authorization:
                  $ref: '#/components/schemas/Authorization'
      responses:
        '200':
          description: Authentication Token is valid
        '401':
          description: Authentication Failed
      tags:
      - authentication
  /credits:
    get:
      operationId: getCredits
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Credit'
                type: array
          description: Successfully retrieved all credits.
        '401':
          description: Authentication token is missing or invalid.
      summary: Get all credits
      tags:
      - credit
    post:
      operationId: createCredit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCredit'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credit'
          description: Successfully created a new credit.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Authentication token is missing or invalid.
      summary: Create a new credit
      tags:
      - credit
  /credits/{creditId}:
    delete:
      operationId: deleteCreditById
      parameters:
      - description: The ID of the credit to delete.
        in: path
        name: creditId
        required: true
        schema:
          minimum: 1
          type: integer
      responses:
        '204':
          description: Successfully deleted the credit.
        '401':
          description: Authentication token is missing or invalid.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Credit not found.
      summary: Delete a credit by ID
      tags:
      - credit
    get:
      operationId: getCreditById
      parameters:
      - description: The ID of the credit to retrieve.
        in: path
        name: creditId
        required: true
        schema:
          minimum: 1
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credit'
          description: Successfully retrieved the credit.
        '401':
          description: Authentication token is missing or invalid.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Credit not found.
      summary: Get a credit by ID
      tags:
      - credit
    patch:
      operationId: updateCreditById
      parameters:
      - description: The ID of the credit to update.
        in: path
        name: creditId
        required: true
        schema:
          minimum: 1
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                amount:
                  description: The new amount of the credit in units.
                  type: integer
              required:
              - amount
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credit'
          description: Successfully updated the credit.
        '401':
          description: Authentication token is missing or invalid.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Credit not found.
      summary: Update a credit by ID
      tags:
      - credit
  /groups:
    get:
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Groups:
                    items:
                      $ref: '#/components/schemas/Group'
                    type: array
          description: OK
      summary: Gets a list of Group objects
      tags:
      - group
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  Group:
                    $ref: '#/components/schemas/Group'
          description: OK
      tags:
      - group
  /groups/{id}:
    delete:
      responses:
        '204':
          description: Deleted
      summary: Deletes a Group object
      tags:
      - group
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Group:
                    $ref: '#/components/schemas/Group'
          description: OK
      summary: Gets a Group object by id
      tags:
      - group
    parameters:
    - in: path
      name: id
      required: true
      schema:
        $ref: '#/components/schemas/GroupId'
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroup'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Group:
                    $ref: '#/components/schemas/Group'
          description: OK
      summary: Updates a Group object
      tags:
      - group
  /items:
    get:
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: '#/components/schemas/Item'
                    type: array
          description: OK
      summary: Gets a list of items. For now, the only kind of item is a room.
      tags:
      - item
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewItem'
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  Room:
                    $ref: '#/components/schemas/Item'
          description: Created
        '400':
          description: 'Bad Request

            '
      summary: Posts an item. For now, the only kind of item is a room.
      tags:
      - item
  /items/{id}:
    delete:
      description: '## More Information

        Request for `DELETE/rooms/{id}` requires an id

        '
      operationId: deleteRoomId
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Deleted
        '404':
          description: 'Item Not Found

            '
      summary: Delete a Room object existing in the Rooms resources
      tags:
      - item
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Room:
                    $ref: '#/components/schemas/Item'
          description: OK
        '404':
          description: 'Item Not Found

            '
      summary: Gets a Item object by id. For now, the only kind of item is a room.
      tags:
      - item
    parameters:
    - in: path
      name: id
      required: true
      schema:
        $ref: '#/components/schemas/ItemId'
    put:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Room:
                    $ref: '#/components/schemas/UpdateItem'
          description: OK
        '404':
          description: 'Item Not Found

            '
      summary: Updates an item. For now, the only kind of item is a room.
      tags:
      - item
  /unavailabilities:
    get:
      description: Retrieve all unavailability associated with a student or a room.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Unavailabilities:
                    items:
                      $ref: '#/components/schemas/Unavailability'
                      type: object
                    type: array
                type: object
          description: OK
      tags:
      - unavailability
    post:
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/NewUnavailability'
              - $ref: '#/components/schemas/NewRecurringUnavailability'
      responses:
        '201':
          content:
            text/plain:
              schema:
                example: Created
                type: string
          description: Created
        '400':
          content:
            text/plain:
              schema:
                example: Bad Request
                type: string
          description: Bad Request
      tags:
      - unavailability
  /unavailabilities/{id}:
    delete:
      description: Delete a specific unavailability identified by the `id` parameter.
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: ../schemas/meta/Success.yaml
          description: Deleted
        '400':
          content:
            application/json:
              schema:
                $ref: ../schemas/meta/Error.yaml
          description: Bad Request
      tags:
      - unavailability
    get:
      description: Retrieves information about a specific unavailability identified
        by the `id` parameter.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  unavailability:
                    $ref: '#/components/schemas/Unavailability'
                    type: object
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: ../schemas/meta/Error.yaml
          description: Bad Request
      tags:
      - unavailability
    parameters:
    - description: The unavailability ID
      in: path
      name: id
      required: true
      schema:
        $ref: '#/components/schemas/UnavailabilityId'
    put:
      description: 'Update a specific unavailability identified by the `id` parameter
        with the information  provided in the request body.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Booking:
                    $ref: '#/components/schemas/UpdateUnavailability'
                    type: object
                type: object
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: ../schemas/meta/Error.yaml
          description: Bad Request
      tags:
      - unavailability
  /users:
    get:
      description: Returns a list of all users.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/AdminUser'
                  - $ref: '#/components/schemas/StandardUser'
                type: array
          description: A list of users
      summary: Get all users
      tags:
      - user
    post:
      description: Creates a new user account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The new user
        '400':
          description: Invalid input
      summary: Create a new user
      tags:
      - user
  /users/admins:
    get:
      description: Returns a list of all admin users.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: A list of admin users
      summary: Get all admin users
      tags:
      - user
    post:
      description: Creates a new admin user account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAdminUser'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The new admin user
        '400':
          description: Invalid input
      summary: Create a new admin user
      tags:
      - user
  /users/standard:
    get:
      description: Returns a list of all standard users.
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: A list of standard users
      summary: Get all standard users
      tags:
      - user
    post:
      description: Creates a new standard user account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewStandardUser'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The new standard user
        '400':
          description: Invalid input
      summary: Create a new standard user
      tags:
      - user
  /users/{userId}:
    delete:
      description: Deletes an existing user account.
      parameters:
      - description: The ID of the user to delete.
        in: path
        name: userId
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
      summary: Delete a user by ID
      tags:
      - user
    get:
      description: Returns a single user by ID.
      parameters:
      - description: The ID of the user to retrieve.
        in: path
        name: userId
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The requested user
        '404':
          description: User not found
      summary: Get a user by ID
      tags:
      - user
    put:
      description: Updates an existing user account.
      parameters:
      - description: The ID of the user to update.
        in: path
        name: userId
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The updated user
        '400':
          description: Invalid input
        '404':
          description: User not found
      summary: Update a user by ID
      tags:
      - user
servers:
- url: https://reserva.emilharvey.ca
