openapi: '3.0.3'
info:
  title: Group Management API
  version: '0.0.1'
servers:
  - url: https://reserva.emilharvey.ca # production
  - url: http://localhost:8080 # development
paths:
  /groups/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/groupId"
    put:
      summary: updates a group object
      description: updates a group object
      security:
        - standard: [write:groups:me]      
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateGroup"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  group:
                    $ref: "#/components/schemas/group"
    delete:
      summary: >
        deletes a group object. 
        Also deletes all groupMembership objects associated with the group.
      description: deletes a group object
      security:
        - standard: [write:groups:me]
      responses:
        '204':
          description: deleted
          content:
            application/json:
              schema:
                properties:
                  group:
                    $ref: "#/components/schemas/group"
  
  /groups/{id}/users:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/groupId"
    get:
      summary: gets a list of user objects
      description: gets a list of user objects for a group
      security:
        - standard: [read:groups:associated]
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/user"
    
  /groups/{id}/memberships/{membershipId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/groupId"
      - name: membershipId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/groupMembershipId"
    delete:
      summary: deletes a groupMembership object
      description: >
        deletes a groupMembership object. 
        The group owner can delete any membership.
        A user can delete their own membership.
      security:
        - standard: 
            - write:groups:me # Owner of the group can delete memberships
            - write:groupMemberships:me # User can delete their own memberships
      responses:
        '204':
          description: deleted
        '404':
          description: not found
  
  /groups:
    post: 
      summary: creates a new group object
      description: creates a new group object
      security:
        - standard: [write:groups:me] 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newGroup"

      responses:
        '201':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  group:
                    $ref: "#/components/schemas/group"
  
  /groupMemberships:
    post:
      summary: creates a new groupMembership object
      description: >
        creates a new groupMembership object.
        Only the group owner can create a membership.
        (After a user becomes a member, they can delete their own membership.)
      security:
        - standard: [write:groups:me]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newGroupMembership"
      responses:
        '201':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  groupMembership:
                    $ref: "#/components/schemas/groupMembership"
  
components:
  schemas:
    $ref: "../schemas/group/_index.yaml"
  securitySchemes:
    $ref: '../security/_all.yaml'