/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/authentication/login": {
    post: {
      requestBody?: {
        content: {
          "application/json": {
            usernamePasswordPair?: components["schemas"]["UsernamePasswordPair"];
          };
        };
      };
      responses: {
        /** @description Authentication Passed */
        201: {
          content: {
            "application/json": {
              authorization?: components["schemas"]["Authorization"];
            };
          };
        };
        /** @description Authentication Failed */
        401: never;
      };
    };
  };
  "/authentication/logout": {
    post: {
      requestBody?: {
        content: {
          "application/json": {
            authorization?: components["schemas"]["Authorization"];
          };
        };
      };
      responses: {
        /** @description Logout Successful */
        200: never;
        /** @description Authentication Failed */
        401: never;
      };
    };
  };
  "/authentication/refresh": {
    post: {
      requestBody?: {
        content: {
          "application/json": {
            authorization?: components["schemas"]["Authorization"];
          };
        };
      };
      responses: {
        /** @description Refresh Successful */
        200: never;
        /** @description Authentication Failed */
        401: never;
      };
    };
  };
  "/authentication/validate": {
    put: {
      requestBody?: {
        content: {
          "application/json": {
            authorization?: components["schemas"]["Authorization"];
          };
        };
      };
      responses: {
        /** @description Authentication Token is valid */
        200: never;
        /** @description Authentication Failed */
        401: never;
      };
    };
  };
  "/credits": {
    /** Get all credits */
    get: operations["getCredits"];
    /** Create a new credit */
    post: operations["createCredit"];
  };
  "/credits/{creditId}": {
    /** Get a credit by ID */
    get: operations["getCreditById"];
    /** Delete a credit by ID */
    delete: operations["deleteCreditById"];
    /** Update a credit by ID */
    patch: operations["updateCreditById"];
  };
  "/groups": {
    /** Gets a list of Group objects */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              Groups?: (components["schemas"]["Group"])[];
            };
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["NewGroup"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              Group?: components["schemas"]["Group"];
            };
          };
        };
      };
    };
  };
  "/groups/{id}": {
    /** Gets a Group object by id */
    get: {
      parameters: {
        path: {
          id: components["schemas"]["GroupId"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              Group?: components["schemas"]["Group"];
            };
          };
        };
      };
    };
    /** Updates a Group object */
    put: {
      parameters: {
        path: {
          id: components["schemas"]["GroupId"];
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["UpdateGroup"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              Group?: components["schemas"]["Group"];
            };
          };
        };
      };
    };
    /** Deletes a Group object */
    delete: {
      parameters: {
        path: {
          id: components["schemas"]["GroupId"];
        };
      };
      responses: {
        /** @description Deleted */
        204: never;
      };
    };
    parameters: {
      path: {
        id: components["schemas"]["GroupId"];
      };
    };
  };
  "/groups/{id}/memberships": {
    /** Gets a list of GroupMembership objects */
    get: {
      parameters: {
        path: {
          id: components["schemas"]["GroupId"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              GroupMemberships?: (components["schemas"]["GroupMembership"])[];
            };
          };
        };
      };
    };
    /** Creates a new GroupMembership object */
    post: {
      parameters: {
        path: {
          id: components["schemas"]["GroupId"];
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["NewGroupMembership"];
        };
      };
      responses: {
        /** @description OK */
        201: {
          content: {
            "application/json": {
              GroupMembership?: components["schemas"]["GroupMembership"];
            };
          };
        };
      };
    };
    parameters: {
      path: {
        id: components["schemas"]["GroupId"];
      };
    };
  };
  "/groups/{id}/memberships/{membershipId}": {
    /** Gets a GroupMembership object by id */
    get: {
      parameters: {
        path: {
          id: components["schemas"]["GroupId"];
          membershipId: components["schemas"]["GroupMembershipId"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              GroupMembership?: components["schemas"]["GroupMembership"];
            };
          };
        };
        /** @description Not Found */
        404: never;
      };
    };
    /** Deletes a GroupMembership object */
    delete: {
      parameters: {
        path: {
          id: components["schemas"]["GroupId"];
          membershipId: components["schemas"]["GroupMembershipId"];
        };
      };
      responses: {
        /** @description Deleted */
        204: never;
        /** @description Not Found */
        404: never;
      };
    };
    parameters: {
      path: {
        id: components["schemas"]["GroupId"];
        membershipId: components["schemas"]["GroupMembershipId"];
      };
    };
  };
  "/items": {
    /** Gets a list of items. For now, the only kind of item is a room. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              items?: components["schemas"]["Item"];
              type?: array;
            };
          };
        };
      };
    };
    /** Posts an item. For now, the only kind of item is a room. */
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["NewItem"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": {
              Room?: components["schemas"]["Item"];
            };
          };
        };
        /** @description Bad Request */
        400: never;
      };
    };
  };
  "/items/{id}": {
    /** Gets a Item object by id. For now, the only kind of item is a room. */
    get: {
      parameters: {
        path: {
          id: components["schemas"]["ItemId"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              Room?: components["schemas"]["Item"];
            };
          };
        };
        /** @description Item Not Found */
        404: never;
      };
    };
    /** Updates an item. For now, the only kind of item is a room. */
    put: {
      parameters: {
        path: {
          /** @description User ID */
          id: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Item"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              Room?: components["schemas"]["UpdateItem"];
            };
          };
        };
        /** @description Item Not Found */
        404: never;
      };
    };
    /**
     * Delete a Room object existing in the Rooms resources 
     * @description ## More Information
     * Request for `DELETE/rooms/{id}` requires an id
     */
    delete: operations["deleteRoomId"];
    parameters: {
      path: {
        id: components["schemas"]["ItemId"];
      };
    };
  };
  "/unavailabilities": {
    /** @description Retrieve all unavailability associated with a student or a room. */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              Unavailabilities?: (components["schemas"]["Unavailability"])[];
            };
          };
        };
      };
    };
    post: {
      requestBody?: {
        content: {
          "application/json": components["schemas"]["NewUnavailability"] | components["schemas"]["NewRecurringUnavailability"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "text/plain": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": string;
          };
        };
      };
    };
  };
  "/unavailabilities/{id}": {
    /** @description Retrieves information about a specific unavailability identified by the `id` parameter. */
    get: {
      parameters: {
        path: {
          /** @description The unavailability ID */
          id: components["schemas"]["UnavailabilityId"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              unavailability?: components["schemas"]["Unavailability"];
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
      };
    };
    /** @description Update a specific unavailability identified by the `id` parameter with the information  provided in the request body. */
    put: {
      parameters: {
        path: {
          /** @description The unavailability ID */
          id: components["schemas"]["UnavailabilityId"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              Booking?: components["schemas"]["UpdateUnavailability"];
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": paths["/unavailabilities/%7Bid%7D"]["get"]["responses"]["400"]["content"]["application/json"]["schema"];
          };
        };
      };
    };
    /** @description Delete a specific unavailability identified by the `id` parameter. */
    delete: {
      parameters: {
        path: {
          /** @description The unavailability ID */
          id: components["schemas"]["UnavailabilityId"];
        };
      };
      responses: {
        /** @description Deleted */
        200: {
          content: {
            "application/json": {
              message?: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": paths["/unavailabilities/%7Bid%7D"]["get"]["responses"]["400"]["content"]["application/json"]["schema"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** @description The unavailability ID */
        id: components["schemas"]["UnavailabilityId"];
      };
    };
  };
  "/users": {
    /**
     * Get all users 
     * @description Returns a list of all users.
     */
    get: {
      responses: {
        /** @description A list of users */
        200: {
          content: {
            "application/json": (components["schemas"]["User"])[];
          };
        };
      };
    };
    /**
     * Create a new user 
     * @description Creates a new user account.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewUser"];
        };
      };
      responses: {
        /** @description The new user */
        201: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid input */
        400: never;
      };
    };
  };
  "/users/admins": {
    /**
     * Get all admin users 
     * @description Returns a list of all admin users.
     */
    get: {
      responses: {
        /** @description A list of admin users */
        200: {
          content: {
            "application/json": (components["schemas"]["User"])[];
          };
        };
      };
    };
    /**
     * Create a new admin user 
     * @description Creates a new admin user account.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewUser"];
        };
      };
      responses: {
        /** @description The new admin user */
        201: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid input */
        400: never;
      };
    };
  };
  "/users/standard": {
    /**
     * Get all standard users 
     * @description Returns a list of all standard users.
     */
    get: {
      responses: {
        /** @description A list of standard users */
        200: {
          content: {
            "application/json": (components["schemas"]["User"])[];
          };
        };
      };
    };
    /**
     * Create a new standard user 
     * @description Creates a new standard user account.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewUser"];
        };
      };
      responses: {
        /** @description The new standard user */
        201: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid input */
        400: never;
      };
    };
  };
  "/users/{userId}": {
    /**
     * Get a user by ID 
     * @description Returns a single user by ID.
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the user to retrieve. */
          userId: number;
        };
      };
      responses: {
        /** @description The requested user */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description User not found */
        404: never;
      };
    };
    /**
     * Update a user by ID 
     * @description Updates an existing user account.
     */
    put: {
      parameters: {
        path: {
          /** @description The ID of the user to update. */
          userId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateUser"];
        };
      };
      responses: {
        /** @description The updated user */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid input */
        400: never;
        /** @description User not found */
        404: never;
      };
    };
    /**
     * Delete a user by ID 
     * @description Deletes an existing user account.
     */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the user to delete. */
          userId: number;
        };
      };
      responses: {
        /** @description User deleted */
        204: never;
        /** @description User not found */
        404: never;
      };
    };
  };
  "/users/{userId}/groups": {
    /**
     * Get all groups for a user 
     * @description Returns a list of all groups for a user.
     */
    get: {
      parameters: {
        path: {
          /** @description The ID of the user to retrieve groups for. */
          userId: number;
        };
      };
      responses: {
        /** @description A list of groups */
        200: {
          content: {
            "application/json": {
              groups?: (components["schemas"]["GroupMembership"])[];
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Authorization: {
      /** @example aaa-bbb-ccc */
      accessToken?: string;
      /** Format: date-time */
      expiresAt?: string;
    };
    Credit: components["schemas"]["NewCredit"] & {
      id: components["schemas"]["CreditId"];
    };
    /**
     * Format: uuid 
     * @description The ID of a credit. This is a UUID with the prefix "credit-".
     *  
     * @example credit-8fec2234-d8cf-43a7-aaaa-94b1fde42468
     */
    CreditId: string;
    /**
     * @description Date-time string with 15-minute interval, e.g., 2023-04-02T12:00:00 
     * @example 2023-04-02T15:00:00
     */
    DateTime15Min: string;
    Error: paths["/unavailabilities/%7Bid%7D"]["get"]["responses"]["400"]["content"]["application/json"]["schema"];
    /** @description The data required to create a new feature. */
    Feature: {
      /** @description The name of the feature. */
      name: string;
      /** @description The value of the feature. */
      value: OneOf<[string, boolean, number]>;
    };
    Group: components["schemas"]["NewGroup"] & {
      id: components["schemas"]["GroupId"];
      /**
       * Format: date-time 
       * @description The date and time the group was created. 
       * @example 2019-01-01T00:00:00Z
       */
      createdAt: string;
      /**
       * Format: date-time 
       * @description The date and time the group was last updated. 
       * @example 2019-03-01T00:00:00Z
       */
      lastUpdatedAt: string;
    };
    /**
     * Format: uuid 
     * @description The ID of a group. This is a UUID with the prefix "group-".
     *  
     * @example group-8fec2234-d8cf-43a7-a791-94b1fde42468
     */
    GroupId: string;
    GroupMembership: components["schemas"]["NewGroupMembership"] & {
      id?: components["schemas"]["GroupMembershipId"];
    };
    /**
     * Format: uuid 
     * @description The ID of a group membership. 
     * @example groupmembership-c49c283a-44d3-4cb5-b836-2ff8436f1e2f
     */
    GroupMembershipId: string;
    /**
     * Format: uuid 
     * @description A UUID. This is a string that is a UUID.
     */
    Id: string;
    /** @description The data returned when an item is retrieved. This is the base schema for all item retrievals. The difference between this and the NewItem schema is that this schema includes the ID, createdAt, and lastUpdatedAt fields. */
    Item: components["schemas"]["NewItem"] & {
      id: components["schemas"]["ItemId"];
      /**
       * Format: date-time 
       * @description The date and time the item was created. 
       * @example 2019-01-01T00:00:00Z
       */
      createdAt?: string;
      /**
       * Format: date-time 
       * @description The date and time the item was last updated. 
       * @example 2019-03-01T00:00:00Z
       */
      lastUpdatedAt?: string;
    };
    /**
     * Format: uuid 
     * @description The ID of the item. This is a UUID with a prefix of "item-".
     *  
     * @example item-cc354ffb-fa63-4a67-a67f-a24048c26c3f
     */
    ItemId: string;
    NewCredit: {
      /** @description The ID of the user to create the credit for. */
      user_id: number;
      /** @description The amount of the credit to create in units. */
      amount: number;
    };
    /** @description A group. This could be a project group, a team, or something else. This is sent by the client when creating a new group. */
    NewGroup: WithRequired<components["schemas"]["UpdateGroup"], "name" | "createdBy">;
    /** @description This is a group membership. It is the intermediate object between a user and a group. It is used to determine which users are members of which groups. */
    NewGroupMembership: {
      /** @description The ID of the group. */
      group: components["schemas"]["GroupId"];
      /** @description The ID of the user. */
      user: components["schemas"]["UserId"];
    };
    /** @description The data required to create a new item. This is the base schema for all item creations. The difference between this and the UpdateItem schema is that this schema requires all fields to be present. */
    NewItem: WithRequired<components["schemas"]["UpdateItem"], "name" | "location" | "description" | "type" | "features">;
    /** @description A recurring unavailability. This could be a maintenance window, a booking, or something else. The client will send this when they want to create a new recurring unavailability. */
    NewRecurringUnavailability: components["schemas"]["NewUnavailability"] & {
      /** @description The recurrence of the unavailability timed from the start time. */
      recurrence: components["schemas"]["DateTime15Min"];
    };
    /** @description A new unavailability. This is sent when a client wants to create a new unavailability. */
    NewUnavailability: WithRequired<components["schemas"]["UpdateUnavailability"], "room" | "startDateTime" | "endDateTime" | "type" | "item">;
    NewUser: components["schemas"]["UpdateUser"] & ({
      /**
       * @description The user's role. 
       * @default user 
       * @enum {string}
       */
      role: "standard" | "admin";
    });
    /** @description A recurring unavailability. This could be a maintenance window, a booking, or something else. The server will send this to clients */
    RecurringUnavailability: components["schemas"]["NewRecurringUnavailability"] & {
      id: components["schemas"]["UnavailabilityId"];
    };
    Success: paths["/unavailabilities/%7Bid%7D"]["delete"]["responses"]["200"]["content"]["application/json"]["schema"];
    Unavailability: components["schemas"]["NewUnavailability"] & {
      id: components["schemas"]["UnavailabilityId"];
      /**
       * Format: date-time 
       * @description The date and time the unavailability was created. 
       * @example 2019-01-01T00:00:00Z
       */
      createdAt: string;
      /**
       * Format: date-time 
       * @description The date and time the unavailability was last updated. 
       * @example 2019-03-01T00:00:00Z
       */
      lastUpdatedAt: string;
    };
    /**
     * Format: uuid 
     * @description The ID of an unavailability. This is a UUID with the prefix "unavailability-".
     *  
     * @example unavailability-cc354ffb-fa63-4a67-a67f-a24048c26c3f
     */
    UnavailabilityId: string;
    /** @description A group. This could be a project group, a team, or something else. This is sent by the client when updating an existing group. */
    UpdateGroup: {
      /**
       * @description The name of the group. 
       * @example Project Group
       */
      name?: string;
      /** @description The ID of the user who created the group */
      createdBy?: components["schemas"]["UserId"];
    };
    /** @description The data required to update an item. This is the base schema for all item updates. */
    UpdateItem: {
      /**
       * @description The name of the item. For now, these will be names of rooms 
       * @example Large Room
       */
      name?: string;
      /**
       * @description The location of the item. 
       * @example 1st Floor
       */
      location?: string;
      /**
       * @description A description of the item. 
       * @example Large Room with Low Ceilings
       */
      description?: string;
      /**
       * @description The type of the item. For now, this will only be Room. 
       * @example Room 
       * @enum {string}
       */
      type?: "Room";
      /**
       * @description The features of the item. For now, these will be the features of the room.
       *  
       * @example [
       *   {
       *     "name": "Style",
       *     "value": "Modern"
       *   },
       *   {
       *     "name": "Size",
       *     "value": 1000
       *   },
       *   {
       *     "name": "Has Windows",
       *     "value": true
       *   }
       * ]
       */
      features?: (components["schemas"]["Feature"])[];
    };
    /** @description An update to an unavailability. This could be a maintenance window, a booking, or something else. This is the base type for all unavailability updates. As a result, it does not have an ID, because it is not a complete unavailability. It also has no required fields, because only need to send a fragment of this data to update an unavailability. */
    UpdateUnavailability: {
      /** @description The ID of the item to be booked. For now, only rooms can be booked. */
      item?: components["schemas"]["ItemId"];
      /** @description The start time of the unavailability. */
      startDateTime?: components["schemas"]["DateTime15Min"];
      /** @description The end time of the unavailability. */
      endDateTime?: components["schemas"]["DateTime15Min"];
      /** @enum {string} */
      type?: "maintenance" | "booking" | "off_hours" | "other";
    };
    UpdateUser: {
      /** @description The user's username. */
      username?: string;
      /**
       * Format: email 
       * @description The user's email address.
       */
      email?: string;
      /**
       * Format: password 
       * @description The user's password.
       */
      password?: string;
    };
    User: components["schemas"]["NewUser"] & {
      id: components["schemas"]["UserId"];
      /**
       * Format: date-time 
       * @description The date and time the user was created. 
       * @example 2019-01-01T00:00:00Z
       */
      createdAt: string;
      /**
       * Format: date-time 
       * @description The date and time the user was last updated. 
       * @example 2019-03-01T00:00:00Z
       */
      lastUpdatedAt: string;
    };
    /**
     * Format: uuid 
     * @description Id of a user. This is a UUID with the prefix "user-".
     *  
     * @example user-7f876542-5b07-4ba4-a380-c946964c5a84
     */
    UserId: string;
    UsernamePasswordPair: {
      /** @example exampleClientId */
      clientId?: string;
      /** @example exampleUsername */
      username?: string;
      /**
       * Format: password 
       * @example examplePassword
       */
      password?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Get all credits */
  getCredits: {
    responses: {
      /** @description Successfully retrieved all credits. */
      200: {
        content: {
          "application/json": (components["schemas"]["Credit"])[];
        };
      };
      /** @description Authentication token is missing or invalid. */
      401: never;
    };
  };
  /** Create a new credit */
  createCredit: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NewCredit"];
      };
    };
    responses: {
      /** @description Successfully created a new credit. */
      201: {
        content: {
          "application/json": components["schemas"]["Credit"];
        };
      };
      /** @description Authentication token is missing or invalid. */
      401: {
        content: {
          "application/json": paths["/unavailabilities/%7Bid%7D"]["get"]["responses"]["400"]["content"]["application/json"]["schema"];
        };
      };
    };
  };
  /** Get a credit by ID */
  getCreditById: {
    parameters: {
      path: {
        /** @description The ID of the credit to retrieve. */
        creditId: number;
      };
    };
    responses: {
      /** @description Successfully retrieved the credit. */
      200: {
        content: {
          "application/json": components["schemas"]["Credit"];
        };
      };
      /** @description Authentication token is missing or invalid. */
      401: never;
      /** @description Credit not found. */
      404: {
        content: {
          "application/json": paths["/unavailabilities/%7Bid%7D"]["get"]["responses"]["400"]["content"]["application/json"]["schema"];
        };
      };
    };
  };
  /** Delete a credit by ID */
  deleteCreditById: {
    parameters: {
      path: {
        /** @description The ID of the credit to delete. */
        creditId: number;
      };
    };
    responses: {
      /** @description Successfully deleted the credit. */
      204: never;
      /** @description Authentication token is missing or invalid. */
      401: never;
      /** @description Credit not found. */
      404: {
        content: {
          "application/json": paths["/unavailabilities/%7Bid%7D"]["get"]["responses"]["400"]["content"]["application/json"]["schema"];
        };
      };
    };
  };
  /** Update a credit by ID */
  updateCreditById: {
    parameters: {
      path: {
        /** @description The ID of the credit to update. */
        creditId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description The new amount of the credit in units. */
          amount: number;
        };
      };
    };
    responses: {
      /** @description Successfully updated the credit. */
      200: {
        content: {
          "application/json": components["schemas"]["Credit"];
        };
      };
      /** @description Authentication token is missing or invalid. */
      401: never;
      /** @description Credit not found. */
      404: {
        content: {
          "application/json": paths["/unavailabilities/%7Bid%7D"]["get"]["responses"]["400"]["content"]["application/json"]["schema"];
        };
      };
    };
  };
  /**
   * Delete a Room object existing in the Rooms resources 
   * @description ## More Information
   * Request for `DELETE/rooms/{id}` requires an id
   */
  deleteRoomId: {
    parameters: {
      path: {
        /** @description User ID */
        id: number;
      };
    };
    responses: {
      /** @description Deleted */
      204: never;
      /** @description Item Not Found */
      404: never;
    };
  };
}
