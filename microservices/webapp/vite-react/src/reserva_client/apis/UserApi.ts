/* tslint:disable */
/* eslint-disable */
/**
 * Main API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupsIdUsersGet200Response,
  ItemsIdUnavailabilitiesGet200Response,
  UsersMeGroupsGet200Response,
  UsersUserIdGet200Response,
} from '../models';
import {
    GroupsIdUsersGet200ResponseFromJSON,
    GroupsIdUsersGet200ResponseToJSON,
    ItemsIdUnavailabilitiesGet200ResponseFromJSON,
    ItemsIdUnavailabilitiesGet200ResponseToJSON,
    UsersMeGroupsGet200ResponseFromJSON,
    UsersMeGroupsGet200ResponseToJSON,
    UsersUserIdGet200ResponseFromJSON,
    UsersUserIdGet200ResponseToJSON,
} from '../models';

export interface UsersGetRequest {
    search?: string;
    page?: number;
    perPage?: number;
}

export interface UsersMeUnavailabilitiesGetRequest {
    start?: Date;
    end?: Date;
}

export interface UsersUserIdGetRequest {
    userId: number;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * returns a list of all users.
     * get all users
     */
    async usersGetRaw(requestParameters: UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsIdUsersGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsIdUsersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * returns a list of all users.
     * get all users
     */
    async usersGet(requestParameters: UsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsIdUsersGet200Response> {
        const response = await this.usersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * returns a list of all groups for the current user.
     * get all groups for the current user
     */
    async usersMeGroupsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersMeGroupsGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersMeGroupsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * returns a list of all groups for the current user.
     * get all groups for the current user
     */
    async usersMeGroupsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersMeGroupsGet200Response> {
        const response = await this.usersMeGroupsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * returns a list of all unavailabilities for the current user.
     * get all unavailabilities for the current user
     */
    async usersMeUnavailabilitiesGetRaw(requestParameters: UsersMeUnavailabilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsIdUnavailabilitiesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString();
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me/unavailabilities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemsIdUnavailabilitiesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * returns a list of all unavailabilities for the current user.
     * get all unavailabilities for the current user
     */
    async usersMeUnavailabilitiesGet(requestParameters: UsersMeUnavailabilitiesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsIdUnavailabilitiesGet200Response> {
        const response = await this.usersMeUnavailabilitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * returns a single user by id.
     * get a user by id
     */
    async usersUserIdGetRaw(requestParameters: UsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersUserIdGet200Response>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersUserIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * returns a single user by id.
     * get a user by id
     */
    async usersUserIdGet(requestParameters: UsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersUserIdGet200Response> {
        const response = await this.usersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
