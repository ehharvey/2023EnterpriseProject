/* tslint:disable */
/* eslint-disable */
/**
 * Main API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UnavailabilitiesIdDelete200Response,
  UnavailabilitiesIdPut200Response,
  UnavailabilitiesIdPut400Response,
  UnavailabilitiesPost201Response,
  UnavailabilitiesPost400Response,
  UnavailabilitiesPostOneOf,
} from '../models';
import {
    UnavailabilitiesIdDelete200ResponseFromJSON,
    UnavailabilitiesIdDelete200ResponseToJSON,
    UnavailabilitiesIdPut200ResponseFromJSON,
    UnavailabilitiesIdPut200ResponseToJSON,
    UnavailabilitiesIdPut400ResponseFromJSON,
    UnavailabilitiesIdPut400ResponseToJSON,
    UnavailabilitiesPost201ResponseFromJSON,
    UnavailabilitiesPost201ResponseToJSON,
    UnavailabilitiesPost400ResponseFromJSON,
    UnavailabilitiesPost400ResponseToJSON,
    UnavailabilitiesPostOneOfFromJSON,
    UnavailabilitiesPostOneOfToJSON,
} from '../models';

export interface UnavailabilitiesIdDeleteRequest {
    id: string;
}

export interface UnavailabilitiesIdPutRequest {
    id: string;
}

export interface UnavailabilitiesPostRequest {
    body?: UnavailabilitiesPostOneOf;
}

/**
 * 
 */
export class UnavailabilityApi extends runtime.BaseAPI {

    /**
     * Delete an unavailability
     */
    async unavailabilitiesIdDeleteRaw(requestParameters: UnavailabilitiesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnavailabilitiesIdDelete200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling unavailabilitiesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standard", ["write:unavailabilities:me"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("staff", ["write:unavailabilities:me"]);
        }

        const response = await this.request({
            path: `/unavailabilities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnavailabilitiesIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete an unavailability
     */
    async unavailabilitiesIdDelete(requestParameters: UnavailabilitiesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnavailabilitiesIdDelete200Response> {
        const response = await this.unavailabilitiesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update an unavailability
     */
    async unavailabilitiesIdPutRaw(requestParameters: UnavailabilitiesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnavailabilitiesIdPut200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling unavailabilitiesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standard", ["write:unavailabilities:me"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("staff", ["write:unavailabilities:me"]);
        }

        const response = await this.request({
            path: `/unavailabilities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnavailabilitiesIdPut200ResponseFromJSON(jsonValue));
    }

    /**
     * update an unavailability
     */
    async unavailabilitiesIdPut(requestParameters: UnavailabilitiesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnavailabilitiesIdPut200Response> {
        const response = await this.unavailabilitiesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new unavailability
     */
    async unavailabilitiesPostRaw(requestParameters: UnavailabilitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnavailabilitiesPost201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standard", ["write:unavailabilities:me"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("staff", ["write:unavailabilities:me"]);
        }

        const response = await this.request({
            path: `/unavailabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnavailabilitiesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new unavailability
     */
    async unavailabilitiesPost(requestParameters: UnavailabilitiesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnavailabilitiesPost201Response> {
        const response = await this.unavailabilitiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
