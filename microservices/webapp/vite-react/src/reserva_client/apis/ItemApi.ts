/* tslint:disable */
/* eslint-disable */
/**
 * Main API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Item,
  ItemsGet200Response,
  ItemsIdUnavailabilitiesGet200Response,
  ItemsPost201Response,
  NewItem,
} from '../models';
import {
    ItemFromJSON,
    ItemToJSON,
    ItemsGet200ResponseFromJSON,
    ItemsGet200ResponseToJSON,
    ItemsIdUnavailabilitiesGet200ResponseFromJSON,
    ItemsIdUnavailabilitiesGet200ResponseToJSON,
    ItemsPost201ResponseFromJSON,
    ItemsPost201ResponseToJSON,
    NewItemFromJSON,
    NewItemToJSON,
} from '../models';

export interface ItemsGetRequest {
    page?: number;
    perPage?: number;
    nameSearch?: string;
    locationSearch?: string;
    descriptionSearch?: string;
}

export interface ItemsIdDeleteRequest {
    id: number;
}

export interface ItemsIdPutRequest {
    id: number;
    item?: Item;
}

export interface ItemsIdUnavailabilitiesGetRequest {
    id: string;
    start: Date;
    end: Date;
    page?: number;
    perPage?: number;
}

export interface ItemsPostRequest {
    newItem?: NewItem;
}

/**
 * 
 */
export class ItemApi extends runtime.BaseAPI {

    /**
     * gets a list of items. for now, the only kind of item is a room.
     */
    async itemsGetRaw(requestParameters: ItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.nameSearch !== undefined) {
            queryParameters['nameSearch'] = requestParameters.nameSearch;
        }

        if (requestParameters.locationSearch !== undefined) {
            queryParameters['locationSearch'] = requestParameters.locationSearch;
        }

        if (requestParameters.descriptionSearch !== undefined) {
            queryParameters['descriptionSearch'] = requestParameters.descriptionSearch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * gets a list of items. for now, the only kind of item is a room.
     */
    async itemsGet(requestParameters: ItemsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsGet200Response> {
        const response = await this.itemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a room object
     */
    async itemsIdDeleteRaw(requestParameters: ItemsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling itemsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("admin", ["write:items"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("staff", ["write:items:me"]);
        }

        const response = await this.request({
            path: `/items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete a room object
     */
    async itemsIdDelete(requestParameters: ItemsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.itemsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * updates an item. for now, the only kind of item is a room.
     */
    async itemsIdPutRaw(requestParameters: ItemsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsPost201Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling itemsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("admin", ["write:items"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("staff", ["write:items:me"]);
        }

        const response = await this.request({
            path: `/items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemToJSON(requestParameters.item),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * updates an item. for now, the only kind of item is a room.
     */
    async itemsIdPut(requestParameters: ItemsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsPost201Response> {
        const response = await this.itemsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * gets a list of unavailabilities for a given item.
     */
    async itemsIdUnavailabilitiesGetRaw(requestParameters: ItemsIdUnavailabilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsIdUnavailabilitiesGet200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling itemsIdUnavailabilitiesGet.');
        }

        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling itemsIdUnavailabilitiesGet.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling itemsIdUnavailabilitiesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString();
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString();
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items/{id}/unavailabilities`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemsIdUnavailabilitiesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * gets a list of unavailabilities for a given item.
     */
    async itemsIdUnavailabilitiesGet(requestParameters: ItemsIdUnavailabilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsIdUnavailabilitiesGet200Response> {
        const response = await this.itemsIdUnavailabilitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * posts an item. for now, the only kind of item is a room.
     */
    async itemsPostRaw(requestParameters: ItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsPost201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("admin", ["write:items"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("staff", ["write:items:me"]);
        }

        const response = await this.request({
            path: `/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewItemToJSON(requestParameters.newItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * posts an item. for now, the only kind of item is a room.
     */
    async itemsPost(requestParameters: ItemsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsPost201Response> {
        const response = await this.itemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
