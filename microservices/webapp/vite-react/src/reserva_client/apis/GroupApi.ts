/* tslint:disable */
/* eslint-disable */
/**
 * Main API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupMembershipsPost201Response,
  GroupsIdUnavailabilitiesGet200Response,
  GroupsIdUsersGet200Response,
  GroupsPost201Response,
  NewGroup,
  NewGroupMembership,
  UpdateGroup,
} from '../models';
import {
    GroupMembershipsPost201ResponseFromJSON,
    GroupMembershipsPost201ResponseToJSON,
    GroupsIdUnavailabilitiesGet200ResponseFromJSON,
    GroupsIdUnavailabilitiesGet200ResponseToJSON,
    GroupsIdUsersGet200ResponseFromJSON,
    GroupsIdUsersGet200ResponseToJSON,
    GroupsPost201ResponseFromJSON,
    GroupsPost201ResponseToJSON,
    NewGroupFromJSON,
    NewGroupToJSON,
    NewGroupMembershipFromJSON,
    NewGroupMembershipToJSON,
    UpdateGroupFromJSON,
    UpdateGroupToJSON,
} from '../models';

export interface GroupMembershipsPostRequest {
    newGroupMembership?: NewGroupMembership;
}

export interface GroupsIdDeleteRequest {
    id: string;
}

export interface GroupsIdMembershipsMembershipIdDeleteRequest {
    id: string;
    membershipId: string;
}

export interface GroupsIdPutRequest {
    id: string;
    updateGroup?: UpdateGroup;
}

export interface GroupsIdUnavailabilitiesGetRequest {
    id: string;
}

export interface GroupsIdUsersGetRequest {
    id: string;
}

export interface GroupsPostRequest {
    newGroup?: NewGroup;
}

/**
 * 
 */
export class GroupApi extends runtime.BaseAPI {

    /**
     * creates a new groupMembership object. Only the group owner can create a membership. (After a user becomes a member, they can delete their own membership.) 
     * creates a new groupMembership object
     */
    async groupMembershipsPostRaw(requestParameters: GroupMembershipsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupMembershipsPost201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standard", ["write:groups:me"]);
        }

        const response = await this.request({
            path: `/groupMemberships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewGroupMembershipToJSON(requestParameters.newGroupMembership),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupMembershipsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * creates a new groupMembership object. Only the group owner can create a membership. (After a user becomes a member, they can delete their own membership.) 
     * creates a new groupMembership object
     */
    async groupMembershipsPost(requestParameters: GroupMembershipsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupMembershipsPost201Response> {
        const response = await this.groupMembershipsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deletes a group object
     * deletes a group object.  Also deletes all groupMembership objects associated with the group. 
     */
    async groupsIdDeleteRaw(requestParameters: GroupsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsPost201Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standard", ["write:groups:me"]);
        }

        const response = await this.request({
            path: `/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * deletes a group object
     * deletes a group object.  Also deletes all groupMembership objects associated with the group. 
     */
    async groupsIdDelete(requestParameters: GroupsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsPost201Response> {
        const response = await this.groupsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deletes a groupMembership object.  The group owner can delete any membership. A user can delete their own membership. 
     * deletes a groupMembership object
     */
    async groupsIdMembershipsMembershipIdDeleteRaw(requestParameters: GroupsIdMembershipsMembershipIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupsIdMembershipsMembershipIdDelete.');
        }

        if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
            throw new runtime.RequiredError('membershipId','Required parameter requestParameters.membershipId was null or undefined when calling groupsIdMembershipsMembershipIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standard", ["write:groups:me", "write:groupMemberships:me"]);
        }

        const response = await this.request({
            path: `/groups/{id}/memberships/{membershipId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deletes a groupMembership object.  The group owner can delete any membership. A user can delete their own membership. 
     * deletes a groupMembership object
     */
    async groupsIdMembershipsMembershipIdDelete(requestParameters: GroupsIdMembershipsMembershipIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsIdMembershipsMembershipIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * updates a group object
     * updates a group object
     */
    async groupsIdPutRaw(requestParameters: GroupsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsPost201Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standard", ["write:groups:me"]);
        }

        const response = await this.request({
            path: `/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGroupToJSON(requestParameters.updateGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * updates a group object
     * updates a group object
     */
    async groupsIdPut(requestParameters: GroupsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsPost201Response> {
        const response = await this.groupsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * gets a list of unavailability objects for a group
     * gets a list of unavailability objects
     */
    async groupsIdUnavailabilitiesGetRaw(requestParameters: GroupsIdUnavailabilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsIdUnavailabilitiesGet200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupsIdUnavailabilitiesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standard", ["read:groups:associated"]);
        }

        const response = await this.request({
            path: `/groups/{id}/unavailabilities`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsIdUnavailabilitiesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * gets a list of unavailability objects for a group
     * gets a list of unavailability objects
     */
    async groupsIdUnavailabilitiesGet(requestParameters: GroupsIdUnavailabilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsIdUnavailabilitiesGet200Response> {
        const response = await this.groupsIdUnavailabilitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * gets a list of user objects for a group
     * gets a list of user objects
     */
    async groupsIdUsersGetRaw(requestParameters: GroupsIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsIdUsersGet200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupsIdUsersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standard", ["read:groups:associated"]);
        }

        const response = await this.request({
            path: `/groups/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsIdUsersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * gets a list of user objects for a group
     * gets a list of user objects
     */
    async groupsIdUsersGet(requestParameters: GroupsIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsIdUsersGet200Response> {
        const response = await this.groupsIdUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * creates a new group object
     * creates a new group object
     */
    async groupsPostRaw(requestParameters: GroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsPost201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standard", ["write:groups:me"]);
        }

        const response = await this.request({
            path: `/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewGroupToJSON(requestParameters.newGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsPost201ResponseFromJSON(jsonValue));
    }

    /**
     * creates a new group object
     * creates a new group object
     */
    async groupsPost(requestParameters: GroupsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsPost201Response> {
        const response = await this.groupsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
