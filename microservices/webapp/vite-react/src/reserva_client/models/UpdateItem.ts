/* tslint:disable */
/* eslint-disable */
/**
 * Main API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Feature } from './Feature';
import {
    FeatureFromJSON,
    FeatureFromJSONTyped,
    FeatureToJSON,
} from './Feature';

/**
 * the data required to update an item. this is the base schema for all item updates.
 * @export
 * @interface UpdateItem
 */
export interface UpdateItem {
    /**
     * the name of the item. for now, these will be names of rooms
     * @type {string}
     * @memberof UpdateItem
     */
    name?: string;
    /**
     * the location of the item.
     * @type {string}
     * @memberof UpdateItem
     */
    location?: string;
    /**
     * a description of the item.
     * @type {string}
     * @memberof UpdateItem
     */
    description?: string;
    /**
     * the type of the item. for now, this will only be room.
     * @type {string}
     * @memberof UpdateItem
     */
    type?: UpdateItemTypeEnum;
    /**
     * the features of the item. for now, these will be the features of the room.
     * @type {Array<Feature>}
     * @memberof UpdateItem
     */
    features?: Array<Feature>;
}


/**
 * @export
 */
export const UpdateItemTypeEnum = {
    Room: 'room'
} as const;
export type UpdateItemTypeEnum = typeof UpdateItemTypeEnum[keyof typeof UpdateItemTypeEnum];


/**
 * Check if a given object implements the UpdateItem interface.
 */
export function instanceOfUpdateItem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateItemFromJSON(json: any): UpdateItem {
    return UpdateItemFromJSONTyped(json, false);
}

export function UpdateItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'features': !exists(json, 'features') ? undefined : ((json['features'] as Array<any>).map(FeatureFromJSON)),
    };
}

export function UpdateItemToJSON(value?: UpdateItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'location': value.location,
        'description': value.description,
        'type': value.type,
        'features': value.features === undefined ? undefined : ((value.features as Array<any>).map(FeatureToJSON)),
    };
}

