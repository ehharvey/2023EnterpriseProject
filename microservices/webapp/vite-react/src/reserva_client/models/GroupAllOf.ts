/* tslint:disable */
/* eslint-disable */
/**
 * Main API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GroupAllOf
 */
export interface GroupAllOf {
    /**
     * the id of a group. this is a uuid with the prefix "group-".
     * @type {string}
     * @memberof GroupAllOf
     */
    id?: string;
    /**
     * the date and time the group was created.
     * @type {Date}
     * @memberof GroupAllOf
     */
    readonly createDate?: Date;
    /**
     * the date and time the group was last updated.
     * @type {Date}
     * @memberof GroupAllOf
     */
    readonly lastUpdateDate?: Date;
    /**
     * id of a user. This is just a string, since the user id is provided by the authentication provider. (in this case, auth0)
     * @type {string}
     * @memberof GroupAllOf
     */
    owner?: string;
}

/**
 * Check if a given object implements the GroupAllOf interface.
 */
export function instanceOfGroupAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GroupAllOfFromJSON(json: any): GroupAllOf {
    return GroupAllOfFromJSONTyped(json, false);
}

export function GroupAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createDate': !exists(json, 'createDate') ? undefined : (new Date(json['createDate'])),
        'lastUpdateDate': !exists(json, 'lastUpdateDate') ? undefined : (new Date(json['lastUpdateDate'])),
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
    };
}

export function GroupAllOfToJSON(value?: GroupAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'owner': value.owner,
    };
}

