/* tslint:disable */
/* eslint-disable */
/**
 * Main API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Unavailability
 */
export interface Unavailability {
    /**
     * the id of the item. 
     * @type {string}
     * @memberof Unavailability
     */
    item: string;
    /**
     * date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00
     * @type {string}
     * @memberof Unavailability
     */
    startDate: string;
    /**
     * date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00
     * @type {string}
     * @memberof Unavailability
     */
    endDate: string;
    /**
     * the id of the owner of the unavailability.
     * It can be a group or a user
     * @type {string}
     * @memberof Unavailability
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof Unavailability
     */
    type: UnavailabilityTypeEnum;
    /**
     * the id of an unavailability.
     * @type {string}
     * @memberof Unavailability
     */
    id: string;
    /**
     * the date and time the unavailability was created.
     * @type {Date}
     * @memberof Unavailability
     */
    readonly createDate: Date;
    /**
     * the date and time the unavailability was last updated.
     * @type {Date}
     * @memberof Unavailability
     */
    readonly lastUpdatedDate: Date;
}


/**
 * @export
 */
export const UnavailabilityTypeEnum = {
    Maintenance: 'maintenance',
    Booking: 'booking',
    OffHours: 'offHours',
    Other: 'other'
} as const;
export type UnavailabilityTypeEnum = typeof UnavailabilityTypeEnum[keyof typeof UnavailabilityTypeEnum];


/**
 * Check if a given object implements the Unavailability interface.
 */
export function instanceOfUnavailability(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "item" in value;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "endDate" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createDate" in value;
    isInstance = isInstance && "lastUpdatedDate" in value;

    return isInstance;
}

export function UnavailabilityFromJSON(json: any): Unavailability {
    return UnavailabilityFromJSONTyped(json, false);
}

export function UnavailabilityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Unavailability {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'item': json['item'],
        'startDate': json['startDate'],
        'endDate': json['endDate'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'type': json['type'],
        'id': json['id'],
        'createDate': (new Date(json['createDate'])),
        'lastUpdatedDate': (new Date(json['lastUpdatedDate'])),
    };
}

export function UnavailabilityToJSON(value?: Unavailability | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'item': value.item,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'owner': value.owner,
        'type': value.type,
        'id': value.id,
    };
}

