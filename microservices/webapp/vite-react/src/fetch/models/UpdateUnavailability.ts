/* tslint:disable */
/* eslint-disable */
/**
 * Main API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * an update to an unavailability. this could be a maintenance window, a booking, or something else. this is the base type for all unavailability updates. as a result, it does not have an id, because it is not a complete unavailability. it also has no required fields, because only need to send a fragment of this data to update an unavailability.
 * @export
 * @interface UpdateUnavailability
 */
export interface UpdateUnavailability {
    /**
     * the id of the item. this is a uuid with a prefix of "item-".
     * @type {string}
     * @memberof UpdateUnavailability
     */
    item?: string;
    /**
     * date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00
     * @type {string}
     * @memberof UpdateUnavailability
     */
    startDate?: string;
    /**
     * date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00
     * @type {string}
     * @memberof UpdateUnavailability
     */
    endDate?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUnavailability
     */
    type?: UpdateUnavailabilityTypeEnum;
}


/**
 * @export
 */
export const UpdateUnavailabilityTypeEnum = {
    Maintenance: 'maintenance',
    Booking: 'booking',
    OffHours: 'off_hours',
    Other: 'other'
} as const;
export type UpdateUnavailabilityTypeEnum = typeof UpdateUnavailabilityTypeEnum[keyof typeof UpdateUnavailabilityTypeEnum];


/**
 * Check if a given object implements the UpdateUnavailability interface.
 */
export function instanceOfUpdateUnavailability(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateUnavailabilityFromJSON(json: any): UpdateUnavailability {
    return UpdateUnavailabilityFromJSONTyped(json, false);
}

export function UpdateUnavailabilityFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateUnavailability {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'item': !exists(json, 'item') ? undefined : json['item'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function UpdateUnavailabilityToJSON(value?: UpdateUnavailability | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'item': value.item,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'type': value.type,
    };
}

