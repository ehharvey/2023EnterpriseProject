/* tslint:disable */
/* eslint-disable */
/**
 * Main API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  User,
  UsersGet200Response,
  UsersUserIdGroupsGet200Response,
} from '../models';
import {
    UserFromJSON,
    UserToJSON,
    UsersGet200ResponseFromJSON,
    UsersGet200ResponseToJSON,
    UsersUserIdGroupsGet200ResponseFromJSON,
    UsersUserIdGroupsGet200ResponseToJSON,
} from '../models';

export interface UsersUserIdGetRequest {
    userId: number;
}

export interface UsersUserIdGroupsGetRequest {
    userId: number;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * returns a list of all admin users.
     * get all admin users
     */
    async usersAdminsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/admins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * returns a list of all admin users.
     * get all admin users
     */
    async usersAdminsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.usersAdminsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * returns a list of all users.
     * get all users
     */
    async usersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * returns a list of all users.
     * get all users
     */
    async usersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersGet200Response> {
        const response = await this.usersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * returns a list of all standard users.
     * get all standard users
     */
    async usersStandardGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/standard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * returns a list of all standard users.
     * get all standard users
     */
    async usersStandardGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.usersStandardGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * returns a single user by id.
     * get a user by id
     */
    async usersUserIdGetRaw(requestParameters: UsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * returns a single user by id.
     * get a user by id
     */
    async usersUserIdGet(requestParameters: UsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.usersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * returns a list of all groups for a user.
     * get all groups for a user
     */
    async usersUserIdGroupsGetRaw(requestParameters: UsersUserIdGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersUserIdGroupsGet200Response>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdGroupsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userId}/groups`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersUserIdGroupsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * returns a list of all groups for a user.
     * get all groups for a user
     */
    async usersUserIdGroupsGet(requestParameters: UsersUserIdGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersUserIdGroupsGet200Response> {
        const response = await this.usersUserIdGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
