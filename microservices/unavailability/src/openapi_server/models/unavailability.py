# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class Unavailability(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Unavailability - a model defined in OpenAPI

        item: The item of this Unavailability.
        start_date_time: The start_date_time of this Unavailability.
        end_date_time: The end_date_time of this Unavailability.
        type: The type of this Unavailability.
        id: The id of this Unavailability.
        created_at: The created_at of this Unavailability.
        last_updated_at: The last_updated_at of this Unavailability.
    """

    item: str = Field(alias="item")
    start_date_time: str = Field(alias="startDateTime")
    end_date_time: str = Field(alias="endDateTime")
    type: str = Field(alias="type")
    id: str = Field(alias="id")
    created_at: datetime = Field(alias="createdAt")
    last_updated_at: datetime = Field(alias="lastUpdatedAt")

    @validator("item")
    def item_pattern(cls, value):
        assert value is not None and re.match(r"^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", value)
        return value

    @validator("start_date_time")
    def start_date_time_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9]{4}-[0-9]{2}-[0-9]{2}T([01][0-9]|2[0-3]):(00|15|30|45):00$", value)
        return value

    @validator("end_date_time")
    def end_date_time_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9]{4}-[0-9]{2}-[0-9]{2}T([01][0-9]|2[0-3]):(00|15|30|45):00$", value)
        return value

    @validator("id")
    def id_pattern(cls, value):
        assert value is not None and re.match(r"^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", value)
        return value

Unavailability.update_forward_refs()
