openapi: 3.0.0
info:
  description: "This API manages user authentication, authorization, and admin management."
  title: User Service API
  version: 0.0.1
servers:
- url: http://user.reserva.emilharvey.ca
paths:
  /users:
    get:
      description: Returns a list of all users.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: A list of users
      summary: Get all users
    post:
      description: Creates a new user account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The new user
        "400":
          description: Invalid input
      summary: Create a new user
  /users/{userId}:
    delete:
      description: Deletes an existing user account.
      parameters:
      - description: The ID of the user to delete.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: User deleted
        "404":
          description: User not found
      summary: Delete a user by ID
    get:
      description: Returns a single user by ID.
      parameters:
      - description: The ID of the user to retrieve.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The requested user
        "404":
          description: User not found
      summary: Get a user by ID
    put:
      description: Updates an existing user account.
      parameters:
      - description: The ID of the user to update.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The updated user
        "400":
          description: Invalid input
        "404":
          description: User not found
      summary: Update a user by ID
  /users/admins:
    get:
      description: Returns a list of all admin users.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: A list of admin users
      summary: Get all admin users
    post:
      description: Creates a new admin user account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The new admin user
        "400":
          description: Invalid input
      summary: Create a new admin user
  /users/standard:
    get:
      description: Returns a list of all standard users.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: A list of standard users
      summary: Get all standard users
    post:
      description: Creates a new standard user account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The new standard user
        "400":
          description: Invalid input
      summary: Create a new standard user
  /users/{userId}/groups:
    get:
      description: Returns a list of all groups for a user.
      parameters:
      - description: The ID of the user to retrieve groups for.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_users__userId__groups_get_200_response'
          description: A list of groups
      summary: Get all groups for a user
components:
  schemas:
    NewUser:
      allOf:
      - $ref: '#/components/schemas/UpdateUser'
      - $ref: '#/components/schemas/NewUser_allOf'
      title: NewUser
    User:
      allOf:
      - $ref: '#/components/schemas/NewUser'
      - $ref: '#/components/schemas/User_allOf'
      title: User
    UpdateUser:
      example:
        password: password
        email: email
        username: username
      properties:
        username:
          description: The user's username.
          title: username
          type: string
        email:
          description: The user's email address.
          format: email
          title: email
          type: string
        password:
          description: The user's password.
          format: password
          title: password
          type: string
      title: UpdateUser
      type: object
    UserId:
      description: |
        Id of a user. This is a UUID with the prefix "user-".
      format: uuid
      pattern: "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      title: UserId
      type: string
    GroupMembership:
      allOf:
      - $ref: '#/components/schemas/GroupMembership_allOf'
      - $ref: '#/components/schemas/GroupMembership_allOf_1'
      title: GroupMembership
    _users__userId__groups_get_200_response:
      example:
        groups:
        - null
        - null
      properties:
        groups:
          items:
            $ref: '#/components/schemas/GroupMembership'
          title: groups
          type: array
      title: _users__userId__groups_get_200_response
    NewUser_allOf:
      properties:
        role:
          default: user
          description: The user's role.
          enum:
          - standard
          - admin
          title: role
          type: string
      required:
      - email
      - password
      - role
      - username
      title: NewUser_allOf
      type: object
      example: null
    User_allOf:
      description: |
        A user. This could be a standard user, an admin, or something else (tbd). The difference between this and NewUser is that this has an ID, which is assigned by the server. It also has timestamps for when the user was created and last updated.
      properties:
        id:
          description: |
            Id of a user. This is a UUID with the prefix "user-".
          format: uuid
          pattern: "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          title: UserId
          type: string
        createdAt:
          description: The date and time the user was created.
          example: 2019-01-01T00:00:00Z
          format: date-time
          readOnly: true
          title: createdAt
          type: string
        lastUpdatedAt:
          description: The date and time the user was last updated.
          example: 2019-03-01T00:00:00Z
          format: date-time
          readOnly: true
          title: lastUpdatedAt
          type: string
      required:
      - createdAt
      - id
      - lastUpdatedAt
      title: User_allOf
      type: object
      example: null
    GroupMembership_allOf:
      description: |
        This is a group membership. It is the intermediate object between a user and a group. It is used to determine which users are members of which groups.
      properties:
        group:
          description: The ID of the group.
          format: uuid
          pattern: "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          title: group
          type: string
        user:
          description: |
            Id of a user. This is a UUID with the prefix "user-".
          format: uuid
          pattern: "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          title: UserId
          type: string
      required:
      - group
      - user
      title: GroupMembership_allOf
      type: object
      example: null
    GroupMembership_allOf_1:
      properties:
        id:
          description: The ID of a group membership.
          format: uuid
          pattern: "^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          title: id
          type: string
      title: GroupMembership_allOf_1
      type: object
      example: null
