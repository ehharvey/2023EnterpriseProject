# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.update_unavailability_owner import UpdateUnavailabilityOwner
import re
from openapi_server import util

from openapi_server.models.update_unavailability_owner import UpdateUnavailabilityOwner  # noqa: E501
import re  # noqa: E501

class UpdateUnavailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item=None, start_date=None, end_date=None, owner=None, type=None):  # noqa: E501
        """UpdateUnavailability - a model defined in OpenAPI

        :param item: The item of this UpdateUnavailability.  # noqa: E501
        :type item: str
        :param start_date: The start_date of this UpdateUnavailability.  # noqa: E501
        :type start_date: str
        :param end_date: The end_date of this UpdateUnavailability.  # noqa: E501
        :type end_date: str
        :param owner: The owner of this UpdateUnavailability.  # noqa: E501
        :type owner: str
        :param type: The type of this UpdateUnavailability.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'item': str,
            'start_date': str,
            'end_date': str,
            'owner': str,
            'type': str
        }

        self.attribute_map = {
            'item': 'item',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'owner': 'owner',
            'type': 'type'
        }

        self._item = item
        self._start_date = start_date
        self._end_date = end_date
        self._owner = owner
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateUnavailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The updateUnavailability of this UpdateUnavailability.  # noqa: E501
        :rtype: UpdateUnavailability
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item(self):
        """Gets the item of this UpdateUnavailability.

        the id of the item. this is a uuid with a prefix of \"item-\".   # noqa: E501

        :return: The item of this UpdateUnavailability.
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this UpdateUnavailability.

        the id of the item. this is a uuid with a prefix of \"item-\".   # noqa: E501

        :param item: The item of this UpdateUnavailability.
        :type item: str
        """
       
        self._item = item

    @property
    def start_date(self):
        """Gets the start_date of this UpdateUnavailability.

        date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00  # noqa: E501

        :return: The start_date of this UpdateUnavailability.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this UpdateUnavailability.

        date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00  # noqa: E501

        :param start_date: The start_date of this UpdateUnavailability.
        :type start_date: str
        """
       
        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this UpdateUnavailability.

        date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00  # noqa: E501

        :return: The end_date of this UpdateUnavailability.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this UpdateUnavailability.

        date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00  # noqa: E501

        :param end_date: The end_date of this UpdateUnavailability.
        :type end_date: str
        """
        

        self._end_date = end_date

    @property
    def owner(self):
        """Gets the owner of this UpdateUnavailability.


        :return: The owner of this UpdateUnavailability.
        :rtype: UpdateUnavailabilityOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this UpdateUnavailability.


        :param owner: The owner of this UpdateUnavailability.
        :type owner: str
        """

        self._owner = owner

    @property
    def type(self):
        """Gets the type of this UpdateUnavailability.


        :return: The type of this UpdateUnavailability.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateUnavailability.


        :param type: The type of this UpdateUnavailability.
        :type type: str
        """
        allowed_values = ["maintenance", "booking", "offHours", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
