# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, picture=None, email=None, name=None, nickname=None, role='standard'):  # noqa: E501
        """User - a model defined in OpenAPI

        :param picture: The picture of this User.  # noqa: E501
        :type picture: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param nickname: The nickname of this User.  # noqa: E501
        :type nickname: str
        :param role: The role of this User.  # noqa: E501
        :type role: str
        """
        self.openapi_types = {
            'picture': str,
            'email': str,
            'name': str,
            'nickname': str,
            'role': str
        }

        self.attribute_map = {
            'picture': 'picture',
            'email': 'email',
            'name': 'name',
            'nickname': 'nickname',
            'role': 'role'
        }

        self._picture = picture
        self._email = email
        self._name = name
        self._nickname = nickname
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def picture(self):
        """Gets the picture of this User.

        the user's picture URL  # noqa: E501

        :return: The picture of this User.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this User.

        the user's picture URL  # noqa: E501

        :param picture: The picture of this User.
        :type picture: str
        """

        self._picture = picture

    @property
    def email(self):
        """Gets the email of this User.

        the user's email.  # noqa: E501

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        the user's email.  # noqa: E501

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this User.

        the user's name.  # noqa: E501

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        the user's name.  # noqa: E501

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this User.

        the user's nickname.  # noqa: E501

        :return: The nickname of this User.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this User.

        the user's nickname.  # noqa: E501

        :param nickname: The nickname of this User.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def role(self):
        """Gets the role of this User.

        the user's role.  # noqa: E501

        :return: The role of this User.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.

        the user's role.  # noqa: E501

        :param role: The role of this User.
        :type role: str
        """
        allowed_values = ["standard", "staff"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
