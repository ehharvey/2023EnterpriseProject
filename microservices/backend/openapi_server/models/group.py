# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, created_by=None, id=None, created_at=None, last_updated_at=None):  # noqa: E501
        """Group - a model defined in OpenAPI

        :param name: The name of this Group.  # noqa: E501
        :type name: str
        :param created_by: The created_by of this Group.  # noqa: E501
        :type created_by: str
        :param id: The id of this Group.  # noqa: E501
        :type id: str
        :param created_at: The created_at of this Group.  # noqa: E501
        :type created_at: datetime
        :param last_updated_at: The last_updated_at of this Group.  # noqa: E501
        :type last_updated_at: datetime
        """
        self.openapi_types = {
            'name': str,
            'created_by': str,
            'id': str,
            'created_at': datetime,
            'last_updated_at': datetime
        }

        self.attribute_map = {
            'name': 'name',
            'created_by': 'createdBy',
            'id': 'id',
            'created_at': 'createdAt',
            'last_updated_at': 'lastUpdatedAt'
        }

        self._name = name
        self._created_by = created_by
        self._id = id
        self._created_at = created_at
        self._last_updated_at = last_updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Group of this Group.  # noqa: E501
        :rtype: Group
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Group.

        The name of the group.  # noqa: E501

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        The name of the group.  # noqa: E501

        :param name: The name of this Group.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def created_by(self):
        """Gets the created_by of this Group.

        Id of a user. This is a UUID with the prefix \"user-\".   # noqa: E501

        :return: The created_by of this Group.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Group.

        Id of a user. This is a UUID with the prefix \"user-\".   # noqa: E501

        :param created_by: The created_by of this Group.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501
        if created_by is not None and not re.search(r'^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', created_by):  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must be a follow pattern or equal to `/^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this Group.

        The ID of a group. This is a UUID with the prefix \"group-\".   # noqa: E501

        :return: The id of this Group.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        The ID of a group. This is a UUID with the prefix \"group-\".   # noqa: E501

        :param id: The id of this Group.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and not re.search(r'^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Group.

        The date and time the group was created.  # noqa: E501

        :return: The created_at of this Group.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Group.

        The date and time the group was created.  # noqa: E501

        :param created_at: The created_at of this Group.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this Group.

        The date and time the group was last updated.  # noqa: E501

        :return: The last_updated_at of this Group.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this Group.

        The date and time the group was last updated.  # noqa: E501

        :param last_updated_at: The last_updated_at of this Group.
        :type last_updated_at: datetime
        """
        if last_updated_at is None:
            raise ValueError("Invalid value for `last_updated_at`, must not be `None`")  # noqa: E501

        self._last_updated_at = last_updated_at
