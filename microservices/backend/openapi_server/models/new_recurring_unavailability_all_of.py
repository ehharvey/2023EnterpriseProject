# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class NewRecurringUnavailabilityAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recurrence=None):  # noqa: E501
        """NewRecurringUnavailabilityAllOf - a model defined in OpenAPI

        :param recurrence: The recurrence of this NewRecurringUnavailabilityAllOf.  # noqa: E501
        :type recurrence: str
        """
        self.openapi_types = {
            'recurrence': str
        }

        self.attribute_map = {
            'recurrence': 'recurrence'
        }

        self._recurrence = recurrence

    @classmethod
    def from_dict(cls, dikt) -> 'NewRecurringUnavailabilityAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The newRecurringUnavailability_allOf of this NewRecurringUnavailabilityAllOf.  # noqa: E501
        :rtype: NewRecurringUnavailabilityAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recurrence(self):
        """Gets the recurrence of this NewRecurringUnavailabilityAllOf.

        date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00  # noqa: E501

        :return: The recurrence of this NewRecurringUnavailabilityAllOf.
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this NewRecurringUnavailabilityAllOf.

        date-time string with 15-minute interval, e.g., 2023-04-02t12:00:00  # noqa: E501

        :param recurrence: The recurrence of this NewRecurringUnavailabilityAllOf.
        :type recurrence: str
        """
        if recurrence is None:
            raise ValueError("Invalid value for `recurrence`, must not be `None`")  # noqa: E501


        self._recurrence = recurrence
