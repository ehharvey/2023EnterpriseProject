# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class NewGroupMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group=None, user=None):  # noqa: E501
        """NewGroupMembership - a model defined in OpenAPI

        :param group: The group of this NewGroupMembership.  # noqa: E501
        :type group: str
        :param user: The user of this NewGroupMembership.  # noqa: E501
        :type user: str
        """
        self.openapi_types = {
            'group': str,
            'user': str
        }

        self.attribute_map = {
            'group': 'group',
            'user': 'user'
        }

        self._group = group
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'NewGroupMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The newGroupMembership of this NewGroupMembership.  # noqa: E501
        :rtype: NewGroupMembership
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this NewGroupMembership.

        the id of a group. this is a uuid with the prefix \"group-\".   # noqa: E501

        :return: The group of this NewGroupMembership.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this NewGroupMembership.

        the id of a group. this is a uuid with the prefix \"group-\".   # noqa: E501

        :param group: The group of this NewGroupMembership.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")  # noqa: E501
        if group is not None and not re.search(r'^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', group):  # noqa: E501
            raise ValueError("Invalid value for `group`, must be a follow pattern or equal to `/^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._group = group

    @property
    def user(self):
        """Gets the user of this NewGroupMembership.

        id of a user. This is just a string, since the user id is provided by the authentication provider. (in this case, auth0)   # noqa: E501

        :return: The user of this NewGroupMembership.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this NewGroupMembership.

        id of a user. This is just a string, since the user id is provided by the authentication provider. (in this case, auth0)   # noqa: E501

        :param user: The user of this NewGroupMembership.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user
