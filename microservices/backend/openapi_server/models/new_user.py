# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NewUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username=None, email=None, password=None, role='user'):  # noqa: E501
        """NewUser - a model defined in OpenAPI

        :param username: The username of this NewUser.  # noqa: E501
        :type username: str
        :param email: The email of this NewUser.  # noqa: E501
        :type email: str
        :param password: The password of this NewUser.  # noqa: E501
        :type password: str
        :param role: The role of this NewUser.  # noqa: E501
        :type role: str
        """
        self.openapi_types = {
            'username': str,
            'email': str,
            'password': str,
            'role': str
        }

        self.attribute_map = {
            'username': 'username',
            'email': 'email',
            'password': 'password',
            'role': 'role'
        }

        self._username = username
        self._email = email
        self._password = password
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'NewUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewUser of this NewUser.  # noqa: E501
        :rtype: NewUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this NewUser.

        The user's username.  # noqa: E501

        :return: The username of this NewUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NewUser.

        The user's username.  # noqa: E501

        :param username: The username of this NewUser.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self):
        """Gets the email of this NewUser.

        The user's email address.  # noqa: E501

        :return: The email of this NewUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NewUser.

        The user's email address.  # noqa: E501

        :param email: The email of this NewUser.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this NewUser.

        The user's password.  # noqa: E501

        :return: The password of this NewUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this NewUser.

        The user's password.  # noqa: E501

        :param password: The password of this NewUser.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def role(self):
        """Gets the role of this NewUser.

        The user's role.  # noqa: E501

        :return: The role of this NewUser.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this NewUser.

        The user's role.  # noqa: E501

        :param role: The role of this NewUser.
        :type role: str
        """
        allowed_values = ["standard", "admin"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
