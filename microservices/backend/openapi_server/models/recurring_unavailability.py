# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class RecurringUnavailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item=None, start_date_time=None, end_date_time=None, type=None, recurrence=None, id=None):  # noqa: E501
        """RecurringUnavailability - a model defined in OpenAPI

        :param item: The item of this RecurringUnavailability.  # noqa: E501
        :type item: str
        :param start_date_time: The start_date_time of this RecurringUnavailability.  # noqa: E501
        :type start_date_time: str
        :param end_date_time: The end_date_time of this RecurringUnavailability.  # noqa: E501
        :type end_date_time: str
        :param type: The type of this RecurringUnavailability.  # noqa: E501
        :type type: str
        :param recurrence: The recurrence of this RecurringUnavailability.  # noqa: E501
        :type recurrence: str
        :param id: The id of this RecurringUnavailability.  # noqa: E501
        :type id: str
        """
        self.openapi_types = {
            'item': str,
            'start_date_time': str,
            'end_date_time': str,
            'type': str,
            'recurrence': str,
            'id': str
        }

        self.attribute_map = {
            'item': 'item',
            'start_date_time': 'startDateTime',
            'end_date_time': 'endDateTime',
            'type': 'type',
            'recurrence': 'recurrence',
            'id': 'id'
        }

        self._item = item
        self._start_date_time = start_date_time
        self._end_date_time = end_date_time
        self._type = type
        self._recurrence = recurrence
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'RecurringUnavailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RecurringUnavailability of this RecurringUnavailability.  # noqa: E501
        :rtype: RecurringUnavailability
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item(self):
        """Gets the item of this RecurringUnavailability.

        The ID of the item. This is a UUID with a prefix of \"item-\".   # noqa: E501

        :return: The item of this RecurringUnavailability.
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this RecurringUnavailability.

        The ID of the item. This is a UUID with a prefix of \"item-\".   # noqa: E501

        :param item: The item of this RecurringUnavailability.
        :type item: str
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")  # noqa: E501
        if item is not None and not re.search(r'^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', item):  # noqa: E501
            raise ValueError("Invalid value for `item`, must be a follow pattern or equal to `/^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._item = item

    @property
    def start_date_time(self):
        """Gets the start_date_time of this RecurringUnavailability.

        Date-time string with 15-minute interval, e.g., 2023-04-02T12:00:00  # noqa: E501

        :return: The start_date_time of this RecurringUnavailability.
        :rtype: str
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this RecurringUnavailability.

        Date-time string with 15-minute interval, e.g., 2023-04-02T12:00:00  # noqa: E501

        :param start_date_time: The start_date_time of this RecurringUnavailability.
        :type start_date_time: str
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")  # noqa: E501
        if start_date_time is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}T([01][0-9]|2[0-3]):(00|15|30|45):00$', start_date_time):  # noqa: E501
            raise ValueError("Invalid value for `start_date_time`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}T([01][0-9]|2[0-3]):(00|15|30|45):00$/`")  # noqa: E501

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this RecurringUnavailability.

        Date-time string with 15-minute interval, e.g., 2023-04-02T12:00:00  # noqa: E501

        :return: The end_date_time of this RecurringUnavailability.
        :rtype: str
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this RecurringUnavailability.

        Date-time string with 15-minute interval, e.g., 2023-04-02T12:00:00  # noqa: E501

        :param end_date_time: The end_date_time of this RecurringUnavailability.
        :type end_date_time: str
        """
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")  # noqa: E501
        if end_date_time is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}T([01][0-9]|2[0-3]):(00|15|30|45):00$', end_date_time):  # noqa: E501
            raise ValueError("Invalid value for `end_date_time`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}T([01][0-9]|2[0-3]):(00|15|30|45):00$/`")  # noqa: E501

        self._end_date_time = end_date_time

    @property
    def type(self):
        """Gets the type of this RecurringUnavailability.


        :return: The type of this RecurringUnavailability.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecurringUnavailability.


        :param type: The type of this RecurringUnavailability.
        :type type: str
        """
        allowed_values = ["maintenance", "booking", "off_hours", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def recurrence(self):
        """Gets the recurrence of this RecurringUnavailability.

        Date-time string with 15-minute interval, e.g., 2023-04-02T12:00:00  # noqa: E501

        :return: The recurrence of this RecurringUnavailability.
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this RecurringUnavailability.

        Date-time string with 15-minute interval, e.g., 2023-04-02T12:00:00  # noqa: E501

        :param recurrence: The recurrence of this RecurringUnavailability.
        :type recurrence: str
        """
        if recurrence is None:
            raise ValueError("Invalid value for `recurrence`, must not be `None`")  # noqa: E501
        if recurrence is not None and not re.search(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}T([01][0-9]|2[0-3]):(00|15|30|45):00$', recurrence):  # noqa: E501
            raise ValueError("Invalid value for `recurrence`, must be a follow pattern or equal to `/^[0-9]{4}-[0-9]{2}-[0-9]{2}T([01][0-9]|2[0-3]):(00|15|30|45):00$/`")  # noqa: E501

        self._recurrence = recurrence

    @property
    def id(self):
        """Gets the id of this RecurringUnavailability.

        The ID of an unavailability. This is a UUID with the prefix \"unavailability-\".   # noqa: E501

        :return: The id of this RecurringUnavailability.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecurringUnavailability.

        The ID of an unavailability. This is a UUID with the prefix \"unavailability-\".   # noqa: E501

        :param id: The id of this RecurringUnavailability.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and not re.search(r'^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._id = id
