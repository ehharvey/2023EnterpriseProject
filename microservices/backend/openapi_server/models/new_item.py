# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.feature import Feature
from openapi_server import util

from openapi_server.models.feature import Feature  # noqa: E501

class NewItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, location=None, description=None, type=None, features=None):  # noqa: E501
        """NewItem - a model defined in OpenAPI

        :param name: The name of this NewItem.  # noqa: E501
        :type name: str
        :param location: The location of this NewItem.  # noqa: E501
        :type location: str
        :param description: The description of this NewItem.  # noqa: E501
        :type description: str
        :param type: The type of this NewItem.  # noqa: E501
        :type type: str
        :param features: The features of this NewItem.  # noqa: E501
        :type features: List[Feature]
        """
        self.openapi_types = {
            'name': str,
            'location': str,
            'description': str,
            'type': str,
            'features': List[Feature]
        }

        self.attribute_map = {
            'name': 'name',
            'location': 'location',
            'description': 'description',
            'type': 'type',
            'features': 'features'
        }

        self._name = name
        self._location = location
        self._description = description
        self._type = type
        self._features = features

    @classmethod
    def from_dict(cls, dikt) -> 'NewItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The newItem of this NewItem.  # noqa: E501
        :rtype: NewItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this NewItem.

        the name of the item. for now, these will be names of rooms  # noqa: E501

        :return: The name of this NewItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewItem.

        the name of the item. for now, these will be names of rooms  # noqa: E501

        :param name: The name of this NewItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this NewItem.

        the location of the item.  # noqa: E501

        :return: The location of this NewItem.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NewItem.

        the location of the item.  # noqa: E501

        :param location: The location of this NewItem.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def description(self):
        """Gets the description of this NewItem.

        a description of the item.  # noqa: E501

        :return: The description of this NewItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewItem.

        a description of the item.  # noqa: E501

        :param description: The description of this NewItem.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def type(self):
        """Gets the type of this NewItem.

        the type of the item. for now, this will only be room.  # noqa: E501

        :return: The type of this NewItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewItem.

        the type of the item. for now, this will only be room.  # noqa: E501

        :param type: The type of this NewItem.
        :type type: str
        """
        allowed_values = ["room"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def features(self):
        """Gets the features of this NewItem.

        the features of the item. for now, these will be the features of the room.   # noqa: E501

        :return: The features of this NewItem.
        :rtype: List[Feature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this NewItem.

        the features of the item. for now, these will be the features of the room.   # noqa: E501

        :param features: The features of this NewItem.
        :type features: List[Feature]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features
