# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Credit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, amount=None, id=None):  # noqa: E501
        """Credit - a model defined in OpenAPI

        :param user_id: The user_id of this Credit.  # noqa: E501
        :type user_id: int
        :param amount: The amount of this Credit.  # noqa: E501
        :type amount: int
        :param id: The id of this Credit.  # noqa: E501
        :type id: str
        """
        self.openapi_types = {
            'user_id': int,
            'amount': int,
            'id': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'amount': 'amount',
            'id': 'id'
        }

        self._user_id = user_id
        self._amount = amount
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'Credit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Credit of this Credit.  # noqa: E501
        :rtype: Credit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this Credit.

        The ID of the user to create the credit for.  # noqa: E501

        :return: The user_id of this Credit.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Credit.

        The ID of the user to create the credit for.  # noqa: E501

        :param user_id: The user_id of this Credit.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def amount(self):
        """Gets the amount of this Credit.

        The amount of the credit to create in units.  # noqa: E501

        :return: The amount of this Credit.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Credit.

        The amount of the credit to create in units.  # noqa: E501

        :param amount: The amount of this Credit.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def id(self):
        """Gets the id of this Credit.

        The ID of a credit. This is a UUID with the prefix \"credit-\".   # noqa: E501

        :return: The id of this Credit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Credit.

        The ID of a credit. This is a UUID with the prefix \"credit-\".   # noqa: E501

        :param id: The id of this Credit.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and not re.search(r'^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[a-z]+-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._id = id
